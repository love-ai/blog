{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"586accd061a6e434fb0914aaceeaa7a85557d56b","modified":1548991369355},{"_id":"source/CNAME","hash":"babc79ac946f9c86318d34809fffe251ce461948","modified":1543910853088},{"_id":"themes/next/.DS_Store","hash":"4097c2c854c14625da3ddb49caf17893e42987ab","modified":1547541435846},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1543418374000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1543418374000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1543418374000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1543418374000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1543418374000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1543418374000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1543418374000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1543418374000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1543418374000},{"_id":"themes/next/README.md","hash":"ee7119baf976616a84d3c9c10fcab567995dc98e","modified":1543418374000},{"_id":"themes/next/_config.yml","hash":"0ff75da3deba677b8fb2b718f3c7688ab79554aa","modified":1546420344232},{"_id":"themes/next/bower.json","hash":"1c22c2003163799cb919f8e9dc1e3d20bd79151d","modified":1543996669154},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1543418374000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1543418374000},{"_id":"themes/next/package.json","hash":"f86ddeeddc0b5c6aff7de1e0101b1f64e7f29476","modified":1543996669156},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1547542437889},{"_id":"source/_posts/2018年终总结.md","hash":"a744ef2b67e0168b2537ccad4d99551712b86bad","modified":1546398411069},{"_id":"source/_posts/二维码为何长这个样子.md","hash":"666a26dda87edfa7f0905ae0119224e320413988","modified":1545729599494},{"_id":"source/_posts/博客搭建之路.md","hash":"f63e77859e169decdbc38879b1fe817e0f80f5ba","modified":1545729572073},{"_id":"source/_posts/来聊聊我的新博客.md","hash":"05b3d82d4020fb1a3cbc06b2fa896dbacb20dbf3","modified":1547544638226},{"_id":"source/_posts/浅谈Android内存优化.md","hash":"489879387b80bb4363b4a18a1e82078f6661c579","modified":1549012734002},{"_id":"source/tags/index.md","hash":"e0ae1fce9691b5f9fc00ac6836db992bfdd75f4c","modified":1545620709673},{"_id":"themes/next/.git/FETCH_HEAD","hash":"7c39fbd47a117269388f053746c7b6cdc46873e1","modified":1543996669134},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1543418374000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"2ff44cf05358b552470d4abf57d07b7f6b6501ec","modified":1543996669149},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1543418374000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1543418196000},{"_id":"themes/next/.git/index","hash":"1b868c153ca38de3d689c0c5a4052e6c77c6bcc3","modified":1543996675667},{"_id":"themes/next/.git/packed-refs","hash":"03b14ae71726ed0d8651d88180e943657fc06159","modified":1543418374000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1543418374000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1543418374000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1543418374000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1543418374000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1543418374000},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1543418374000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1543418374000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1543418374000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1543418374000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1543418374000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1543418374000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1543418374000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1543418374000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1543418374000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1543418374000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1543418374000},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1543418374000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1543418374000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1543418374000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1543418374000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1543418374000},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1543418374000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1543418374000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1543418374000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1543418374000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1543418374000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1543418374000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1543418374000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1543418374000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1543418374000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1543418374000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1543418374000},{"_id":"themes/next/layout/.DS_Store","hash":"1703d59926e593284c563826e94bbe6742069f79","modified":1545654810293},{"_id":"themes/next/layout/_layout.swig","hash":"4b7a12e8acbfd782301eb30dbd4c85056a0a9ff7","modified":1543418374000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1543418374000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1543418374000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1543418374000},{"_id":"themes/next/layout/page.swig","hash":"862b361852fb6d7a95bfb6077922410a33cd3126","modified":1543418374000},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1543418374000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1543418374000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1543418374000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1543418374000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1543418374000},{"_id":"themes/next/source/.DS_Store","hash":"2f1a5ccccb7633c7a0ea00f10ffd636044e439ae","modified":1547541753040},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1543418374000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1543418374000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1543418374000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1543418196000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1543418196000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1543418196000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1543418196000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1543418196000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1543418196000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1543418196000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1543418196000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1543418196000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1543418196000},{"_id":"themes/next/.git/logs/HEAD","hash":"0a2c430fe012afdb332b11d993bf4ef13411a157","modified":1543996669159},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1543418374000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1543418374000},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1543418374000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1543418374000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1543418374000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1543418374000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1543418374000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1543418374000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"82f9e238bac68dfe592915631d1ff0cca7b9da95","modified":1543418374000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1543418374000},{"_id":"themes/next/layout/_macro/post.swig","hash":"225db2f98a9f08b713d24994cf989880618438eb","modified":1543418374000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1543418374000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e495523780dbdf6228d933c25bb28bcf4c0952f5","modified":1543418374000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1543418374000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1543418374000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"dce2938bb54c3cef3319f09f2621b93bc41117a0","modified":1543996669154},{"_id":"themes/next/layout/_partials/footer.swig","hash":"223720f75b6406724b046967a6a30e3f040915c6","modified":1545654803813},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1543418374000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1543418374000},{"_id":"themes/next/layout/_partials/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1543418374000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1543418374000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1543418374000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1543418374000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f380a10c792411eff82204305b097a288ed0b423","modified":1543418374000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"9144a101d3353a57a301a0b422d6cf5b569daa38","modified":1544003249381},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1543418374000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1543418374000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1543418374000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"c0f6f02d7d7eb20eb216003c6cfb4ea52060f791","modified":1543418374000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1543418374000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1543418374000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"def2736c8c10170712ff36dea220243b0c1858af","modified":1543418374000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1543418374000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1543418374000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1543418374000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1543418374000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1543418374000},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1543418374000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1543418374000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1543418374000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1543418374000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1543418374000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1543418374000},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1543418374000},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1543418374000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1543418374000},{"_id":"themes/next/source/css/.DS_Store","hash":"2fba45d3a59dd3c97770623d15938f0b5e9ad321","modified":1544001992949},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1543418374000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1543418508000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1543418374000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1543418374000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1543418374000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1543418374000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1543418374000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1543418374000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1543418374000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1543418374000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1543418374000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543418374000},{"_id":"themes/next/source/images/logo.png","hash":"ecfd638922ed3ee81cdbf8528dde23db8aa3110f","modified":1543162830000},{"_id":"themes/next/source/images/logo.svg","hash":"ff03bd8d089985fdfea8a900337b1d5e7fd8e4ff","modified":1543996675647},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543418374000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1543418374000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1543418374000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1543418374000},{"_id":"themes/next/source/js/.DS_Store","hash":"6c3c5420bb1e211faae0f0349f095c37b74082b0","modified":1546419404824},{"_id":"themes/next/source/lib/.DS_Store","hash":"43da6f8b65910c4a8dfd540ababd278fb2613c87","modified":1546419532074},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543418374000},{"_id":"themes/next/.git/objects/21/b6afc78dbdffd7d7c108ee199b8f24cc41b509","hash":"c6c64524654f8bc0517dbca27b894ad2e26868c3","modified":1543996669121},{"_id":"themes/next/.git/objects/26/5578b811e2c77281666b868521317426c77b43","hash":"838a5635cbf1a5a1e49f7ab2751386797f4071a1","modified":1543996669104},{"_id":"themes/next/.git/objects/02/1139dc78854fc5931903a7337e7fe60ca66c5a","hash":"813fa0f9375059d4b239e433b553e6932217edd0","modified":1543996663021},{"_id":"themes/next/.git/objects/2a/0fc6abcb587223dc032c87fe1aed546495a328","hash":"58543e4efc2750654021c565bc12521261e56bf6","modified":1543996669123},{"_id":"themes/next/.git/objects/08/1277766552525e402bba6a485a96950178d53a","hash":"cdf6061d910927aef03b7984535018c9a643d66e","modified":1543996669120},{"_id":"themes/next/.git/objects/31/53f331b5cfeb8bf6fda59421289d88d387ed96","hash":"e1ad2a68f7bf1611e7084176417642ad77c5d710","modified":1543996669118},{"_id":"themes/next/.git/objects/27/e7d1059747c5f4451b9db513f576cea0faa3b5","hash":"8fdfc71473d2c3c9a77400895f9c5f01ce88f2dc","modified":1543996669115},{"_id":"themes/next/.git/objects/33/2bf5517f972a2b4c6278394aa117ec2383fca2","hash":"d4e1238118458aecd1af19a3eb6a5b7960d40a00","modified":1543996669119},{"_id":"themes/next/.git/objects/5d/677f45709457dcf6c6473eba2eee7ff7966f66","hash":"ba8f04964e2f5298e7f8c5bb43b55c262f4b600b","modified":1543996669102},{"_id":"themes/next/.git/objects/04/86c753380d66b8682c2ba1c667bb617145b224","hash":"6406a853be09c74d6c3dfbeb696c88af2ab9e55d","modified":1543996669117},{"_id":"themes/next/.git/objects/70/db04e1bf37166a355e5aff03b259af6595d51a","hash":"3a0558ab9d456deed2cfdbf5002769a5a9d88f32","modified":1543996663019},{"_id":"themes/next/.git/objects/44/82154dfa0ce4db603da3d5fafbff2d1107d50a","hash":"a0c5cfeb5a6d11a1763e7f26348790a778046574","modified":1543996669105},{"_id":"themes/next/.git/objects/78/c19c0b86996c3d98f3bfd46257377b054609e2","hash":"e108ebe872d024631cf94b8ac3df36c80e592b30","modified":1543996669106},{"_id":"themes/next/.git/objects/5c/324dca654ff7aa5304be6b804d8a3d44a460c7","hash":"296d33f0e25bf83ded8de789385f62225e2e706d","modified":1543996669110},{"_id":"themes/next/.git/objects/5c/90ffcc00676e27e01538b45bb8ef74e1d6fc40","hash":"431f301a2f04a91c26b14d5dce745c16baed67ee","modified":1543996669107},{"_id":"themes/next/.git/objects/93/cca5bf2aa9749ba6fdaa4b41e417f275aeae64","hash":"058a3a0e9ab4219d7ec474026d622df8b63670c5","modified":1543996669108},{"_id":"themes/next/.git/objects/8a/59fb0c6a6465ed7d6effd09da965bd4b0d840c","hash":"3f6028ef231556a0d9fcdecd94e973bf345a0c06","modified":1543996663013},{"_id":"themes/next/.git/objects/9b/99648536a4981c781be4c335f01fd6cd1c1d6c","hash":"c4ad1dd9350b46e036d67b59ed3738db4557bcdb","modified":1543996662993},{"_id":"themes/next/.git/objects/9c/0ddda47687dc696b3347715a6267aeae6e0926","hash":"952b99a89e3867b3997db123a435ca21d9a8680a","modified":1543996663014},{"_id":"themes/next/.git/objects/9f/94494352a1b5ddd1b59e4b4ac9e3f434a87d8b","hash":"f468500490258074f8436b00262e67eaa8110c4b","modified":1543996669115},{"_id":"themes/next/.git/objects/b5/82fc9ccb28b44b3404c33a6b13b4a6b05d3667","hash":"e311c985bc18e051110589f3f27da6a4c6f206c0","modified":1543996669108},{"_id":"themes/next/.git/objects/b7/466f2ff2a9a0cb04d82d658d2989aa8416aca7","hash":"9440d25b608b157d0dd8777757863811ddbb72fd","modified":1543996669111},{"_id":"themes/next/.git/objects/c8/c69273cc4e8f6eeb2b477be9096c3365bc7166","hash":"a04917729a7b51d8f9d1da2b044160cc69d43c75","modified":1543996669119},{"_id":"themes/next/.git/objects/a7/a2f53dc64319a13fe1dd1eb78038f11f8c15a0","hash":"688d1cea1f358f9951d06cb7264255e486a1ad67","modified":1543996675651},{"_id":"themes/next/.git/objects/d0/82aa02402a62fd66470269787eb0556fd5cb5a","hash":"d7072a5ea020db87389dbf3cbf17b23403bdfc3b","modified":1543996663020},{"_id":"themes/next/.git/objects/d0/f901dfe656e4196e7abee1d7a750203ac99675","hash":"029a7a0e25e7bed1c1161c85c15d7b32c7e6aa34","modified":1543996669123},{"_id":"themes/next/.git/objects/d2/f496cba8a1b37c7064ad97eb772da144a7da28","hash":"cc37c8b949df99983b11d3eab51579edcb1dca23","modified":1543996663019},{"_id":"themes/next/.git/objects/df/a37bc746ceca806b926699d855cf0fced29f80","hash":"11f656f1b89d5a2ba7634b0368a59f617ab0d8a5","modified":1543996663032},{"_id":"themes/next/.git/objects/e0/8959f90ea7fc521abca03f3881aca67a59e8d4","hash":"da25e32c5cf0be6321aff15dbff6c035ad18b56c","modified":1543996669103},{"_id":"themes/next/.git/objects/e1/a033affe642ebdc33427b44f3c8b2a2f768b64","hash":"362576337415d5d75f3630d99801e0b2fec8ff5f","modified":1543996663020},{"_id":"themes/next/.git/objects/e7/6e6c616ec189775a4f75657609fca2ecb648ea","hash":"86fd1738a3a1b63728a03f8518317a33d8795b7b","modified":1543996663014},{"_id":"themes/next/.git/objects/e7/bdfb270bd069342fa4a1ebc0ea744ebfb353d1","hash":"a4284f75a85c9f6c42b6dcfda2ad97c66eb37c7e","modified":1543996669118},{"_id":"themes/next/.git/objects/eb/7d40ae22d127cb67948bd5b470835253baa32e","hash":"90d4a1f59f307b54c9fd9e529d5d2cc180ac7d7c","modified":1543996669120},{"_id":"themes/next/.git/objects/f8/f51c1d3760bd5e4dfd2c5277d4715a38a4803d","hash":"dddbaa34e14512a0a554875e4ea266b4e39e8c10","modified":1543996669111},{"_id":"themes/next/.git/objects/f7/2ee1fffc6ccdce201af91219077864b75692c5","hash":"78eb66cd94e0ced1e491aaded5c54d63d0545701","modified":1543996669122},{"_id":"themes/next/.git/objects/fa/99660e22c314356716e689d235a12a52322480","hash":"4147a4f8ea0560f2e074e1b3e4e9aadcf58d958e","modified":1543996669103},{"_id":"themes/next/.git/objects/fd/e2b17c2c3e7940216377e78d22a9ae0d8957b8","hash":"8aa44f6235bec9e9db00ca31cc745767da36c63e","modified":1543996669113},{"_id":"themes/next/.git/objects/fe/d02068218b70d3104320fb8f4f5c1741dc3137","hash":"f0632a6560878cc2899ddda34c5801d00ca77526","modified":1543996669109},{"_id":"themes/next/.git/refs/heads/master","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1543996669158},{"_id":"themes/next/.git/refs/tags/v6.6.0","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1543996669133},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1543418374000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"495fb08875b2e1e04f9c4f3e9e593cdf5c32cc31","modified":1543418374000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1543418374000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1543418374000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1543418374000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1543418374000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1543418374000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1543418374000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1543418374000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1543418374000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1543418374000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1543418374000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1543418374000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1543418374000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1543418374000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1543418374000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1543418374000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1543418374000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1543418374000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1543418374000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1543418374000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"c4adbde0ef775e475146fbeb2be03568e16a1c73","modified":1543996669154},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1543418374000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1543418374000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"9809d63a4234c5f268ff0b489579149b849728fc","modified":1543996669155},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1543418374000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1543418374000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1543418374000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1543418374000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"15cae4ebac6e86fe22cf1eb3034be4d5049b410b","modified":1543996669155},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1543418374000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1543418374000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1543418374000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1543418374000},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"9c9f61b7bfb3349b03b1e61355f20232044b5fd8","modified":1543418374000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1543418374000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1543418374000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1543418374000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1543418374000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1543418374000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1543418374000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1543418374000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1543418374000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1543418374000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1543418374000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1543418374000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1543418374000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1543418374000},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1543418374000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1543418374000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1543418374000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1543418374000},{"_id":"themes/next/source/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1543418374000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1545711407878},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1545711407879},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1545711407879},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"a40db80eb6386b085ff810fd3e302f12e76b8df7","modified":1545711407879},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1543418374000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1543418374000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1543418374000},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1546418492027},{"_id":"themes/next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1546418492027},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1546418492027},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1546418492028},{"_id":"themes/next/.git/objects/pack/pack-b726f78e5f56fcc947ca8ebb3c70efce39669c4f.idx","hash":"541549e9c49106d44fe4fe51b0d875fa229c592a","modified":1543418374000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1543418374000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"e813ff96b22ca79c746822380bdaf8a2298e2690","modified":1543996669159},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1543418374000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1543996669132},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1543418374000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1543418374000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1543418374000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ec2a62400642bb69edd9259e74e8f1c8ed53c42b","modified":1543418374000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1543418374000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1543418374000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1543418374000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1543418374000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"665b1813a1d6fbc3c5549a76e4f26cd62a804dde","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f26860978fc4e011758945db5d0f79105ac84fae","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1543418374000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1543418374000},{"_id":"themes/next/source/lib/fancybox/.git/FETCH_HEAD","hash":"bd7aca3decb9d788f98af7668e87e130cd687abf","modified":1545711447268},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1545711407874},{"_id":"themes/next/source/lib/fancybox/.git/ORIG_HEAD","hash":"54842948c942e24363feb62b3763663f79080d8d","modified":1545711447280},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1545711407875},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"e78974bd0869d52561ee1d23ca5dc9a297ad737b","modified":1545711434335},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"f8b51efbbe2f5a4e20e291c88d8c8119842c0022","modified":1545711407872},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1543418374000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1543418374000},{"_id":"themes/next/source/lib/fancybox/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1545711407879},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1545711407880},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1545711407881},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1545711407882},{"_id":"themes/next/source/lib/needsharebutton/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1546418492020},{"_id":"themes/next/source/lib/needsharebutton/.git/config","hash":"3bd2fc1363cc36b469c252931084daa7b046d52a","modified":1546418492022},{"_id":"themes/next/source/lib/needsharebutton/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1546418487889},{"_id":"themes/next/source/lib/needsharebutton/.git/index","hash":"733621bf110294864526eaad89a20af9ddfb1c5d","modified":1546418492028},{"_id":"themes/next/source/lib/needsharebutton/.git/packed-refs","hash":"018b03f9d6b9a0c7174e34007d73f0e086898663","modified":1546418492015},{"_id":"themes/next/source/lib/needsharebutton/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1546418492026},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1543418374000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"7eff0f544bc2239f7aeda856bfe28d14e53e132c","modified":1543996669133},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"afabae1d06baa5f6a15dc8468112083e25b00365","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a6dc3c7eb81ef5117c28fa2245fff1adc02d0292","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"a1eeceea4b88fba184408cb2507bbef1f5e7b0e0","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1543996669156},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1543418374000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"fcb8d1f2cffaa418b7c471e0238e101ea0025d0e","modified":1543996669156},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1543418374000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1543418374000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1543418374000},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1545711405050},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1545711405050},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1545711405050},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1545711405049},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1545711405050},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1545711405051},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1545711405048},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"1c20afb3414f6ac74047d14810ad7389536d7b61","modified":1545711407874},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1543418374000},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1546418487891},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1545711407883},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1546418487889},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1546418487891},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1546418487893},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1546418487893},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1546418487890},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1546418487893},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1546418487890},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1546418487892},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1546418487892},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1546418487894},{"_id":"themes/next/source/lib/needsharebutton/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1546418487888},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/HEAD","hash":"8e1d6966b3716f6af6ee7d053eb1fdcdf13a1431","modified":1546418492021},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1543418374000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1545711407881},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1545711407862},{"_id":"themes/next/source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1545711407391},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1545711407398},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1545711407713},{"_id":"themes/next/source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1545711407396},{"_id":"themes/next/source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1545711407396},{"_id":"themes/next/source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1545711407394},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1545711407392},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1545711407863},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1545711407399},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1545711407397},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1545711407463},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1545711407712},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1545711407395},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1545711407393},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1545711407395},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"54842948c942e24363feb62b3763663f79080d8d","modified":1545711407874},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1545711407400},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/heads/master","hash":"414a643b841a756253dc0c2472b2f7a6e9b14778","modified":1546418492020},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1546418491991},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/97d452adf1f9aa29468c10dc5aca581c40d35d","hash":"8247b73544627904f1c49b2d48e8a5ca24c49d94","modified":1546418491929},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1546418491991},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/34/73a532c76c2ec7eaafc9bba9bc37851cb5a349","hash":"991d675a7982030fef4e8103ecdf717e2e153143","modified":1546418491927},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/10/7997cd9f09e787407d6a579bb0ead61ba0c44e","hash":"a7bb772e0f541b9f0c5e4682f88881faef7d2b87","modified":1546418491848},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/1f/9bfac8ac3b22f100c85bb82877c7af973f011a","hash":"74f0088767a48b5b8874bb5e8953604058233105","modified":1546418491916},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/35/b5765a89abcc57439ad0e7b60dc67225e76570","hash":"b020fa3885506f64651a4a63d42b32c7874a072a","modified":1546418491926},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/37/e84bbc9c853d9abc39b18361a67d09402a9fec","hash":"330ba4772d5feaf23bd85aa38be94a1b254cac8a","modified":1546418491843},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/40/a8a2ab6075fb13a489aa2585f55518e03440cc","hash":"40a879b454bae72ba30ab918e7cbb3dee04c45c4","modified":1546418491852},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/41/f2acffe002ce9fa94904bdbb105c62697c08bf","hash":"6aca807e726bf9bbffdab1b97cae1132dd3570c8","modified":1546418491844},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/3c/673c6e10073f4cf715526c3ab99edf7461b267","hash":"9362453f89eefcc6988cd3a39548c90402f616a8","modified":1546418491990},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/46/66508d485306f48ac866f4a0eded896b01adb0","hash":"a37ee79e50b83b3a5a7f736cfc6b8eafc210ebca","modified":1546418491932},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/e08108a89c7bf4f1e03fdf9d23fa1841ddc40a","hash":"3a32bfdf83debfa739a05a12c77c9c8c9fad6baf","modified":1546418491934},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/51/e4a626dc726971ce48b9d29531ec4fa11ab93c","hash":"8bc98d2bd4f224fbba56e0339ba9e1abfbd0e676","modified":1546418491847},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/63/ce5669cda10d9c600a65df1c509155a9dce354","hash":"e7eefb05c18a77c99c1044dc53cc0b33bc4bc723","modified":1546418491849},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1546418491852},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/72/38adfc9f0b65e7dd8e7eb39b53fd8dbd05728d","hash":"67f5fb35cbbb4625e049368c8ef7fef03e21315d","modified":1546418491933},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/ad104add4d67baba615eccfcc7876bdf60256f","hash":"787497f0b2a074be846ae940ba58475a830690d4","modified":1546418491934},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/b1d62571d3374de0902fdf14c3fd925263c295","hash":"f0d087a62296e14072d250d0db5bfeb01e3e0f4c","modified":1546418491851},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/80/8d63b637e30043e74f5150047c232028ffa3bf","hash":"c7cd9201316a2cf66b63cd0f520dc827912d8be8","modified":1546418491853},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/8a/e95435136e887fc30227f9fdab68ff72689315","hash":"f1225345f08eb5abbf849a40efdec16839268c9b","modified":1546418492005},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/91/85a82ce05e0c4c6287e3ce6c31d79049a6c5de","hash":"d40af8a4f325b8b2d6eeb1f51497d2313aade46d","modified":1546418491926},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/96/b1227c70e63f95b099993321043a2e05abdbea","hash":"d1f0885e3a68fdfc87e68e5ba6b60de116c3c7a5","modified":1546418491930},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/99/ac01b3cae78a765c45566d5540596f71f0f9ed","hash":"394e54788569a0aef47f5c1867b7a617d314b677","modified":1546418491846},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9a/563a770314159840897f1852b05f183911ae71","hash":"0949c3c36849e955c84cc66f544fbeeca266ae19","modified":1546418491932},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9c/850e429959950cfd82a30843ad130dfd24331a","hash":"001c3423e8a4bf2ccd3e0ad3080d5cace613d42c","modified":1546418491924},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9f/e80d3fee719ad9953c0e8e8dec472bb727d17d","hash":"09516f8a3f62a9e286f3ac1985969d0913d53271","modified":1546418491920},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a1/5c0ab3f7ca37d06a7a3dc28f6375ac8fcaffe1","hash":"3aa24fa2254a71f9b408a01ad7154cc1cbf7cde6","modified":1546418491850},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a7/df932fbaa27cde88a4e1b6b222e445d24d88a9","hash":"65ed1fff3d6ea0eed90011b6c9c892381c0b4837","modified":1546418492003},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/aa/f4e31e1d4ea073ad9f6926e146fea3c6d8b423","hash":"7c412d2a2243907dff0a1940f13a539675d76428","modified":1546418491931},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b2/8efd888e853a00d7c8ba8fc827ddb0edb6668b","hash":"8c17e115b7c8a860650191fc1b74e7861ab0f7b9","modified":1546418491925},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/bf/839b1a2dfd79af314506907196f817d1d540b0","hash":"196a52782c02c03b787cca10ca172a6be6ddb8e0","modified":1546418491934},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b4/8a9ad41dbacf220607a3854e23f2136ced96fb","hash":"81ee83b48edb7df4f08573cdd14200be5f62128a","modified":1546418491845},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/da/3a5548a43813122821bf626fdd51a15f89afe3","hash":"1d8c39585806e5c7b051eb58d566a399b0e77006","modified":1546418491847},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e3/096992403adfd6ad955585273915bdeae3dc32","hash":"356ee4003511e7f9c9c4badd52af674adceec2d9","modified":1546418491935},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e7/169e14c00f267f49acb69c1ba41dc9a3229d36","hash":"2b79081ef52aec5ca3896894e25e330aed84ac6f","modified":1546418491919},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/eb/83c3470835cc056d65fbaec5ba59fc01a341c6","hash":"a48447a56db4dce3b2ce99fcfd4cbb5d5902877f","modified":1546418491928},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/efb0da782cd6bdfbd7aec14e8e186c2010beb3","hash":"002214074d8349ca4765414ee39cbeb0a3a443d6","modified":1546418492004},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/fd49187c43c81ad64c250eac1d63893c073e38","hash":"0e6f432ab1ec9a413655267ad3f62205e2e71f99","modified":1546418491928},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/a400ecc881307dc0faa24170ae0a9bcbba861c","hash":"4b82935622bd12041cf7665503ae8e060705e7fd","modified":1546418491845},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/fc2c417f7156d25437bbe069fa10645b4c3a63","hash":"377e0fce80cab14d6966371260926ee78da12b09","modified":1546418491851},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1545711407861},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/c5d2b0c8ded3a5465f659504d5654759b45ce9","hash":"133f2916c8dd706d9ea44203f671d42abed6d183","modified":1546418491922},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"1c20afb3414f6ac74047d14810ad7389536d7b61","modified":1545711407874},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1545711407873},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1546418492019},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/heads/master","hash":"8e1d6966b3716f6af6ee7d053eb1fdcdf13a1431","modified":1546418492021},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"1c20afb3414f6ac74047d14810ad7389536d7b61","modified":1545711407873},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/remotes/origin/HEAD","hash":"8e1d6966b3716f6af6ee7d053eb1fdcdf13a1431","modified":1546418492019},{"_id":"themes/next/.git/objects/pack/pack-b726f78e5f56fcc947ca8ebb3c70efce39669c4f.pack","hash":"55b0835eb8a58c049bcaf876fbad8f3da36075cf","modified":1543418374000},{"_id":"public/tags/index.html","hash":"21914c7b9cd0ce22b659e458d1442122f8e1dac8","modified":1549012825192},{"_id":"public/archives/2018/index.html","hash":"eee2880f0eecb47ef622033235a1b503b2c6e939","modified":1549012825192},{"_id":"public/archives/index.html","hash":"9de20a36a634ef8b731dd3c40ec551ca7164461f","modified":1549012825192},{"_id":"public/archives/2018/12/index.html","hash":"fa894432845e8501da780b4c3540b74abbcd9f95","modified":1549012825192},{"_id":"public/archives/2019/index.html","hash":"fcdce9e08401525edb37375c13324ad106d6afca","modified":1549012825192},{"_id":"public/archives/2019/01/index.html","hash":"facd8d30f459fbd8a4e8c55cd21046708d84c33c","modified":1549012825192},{"_id":"public/tags/生活/index.html","hash":"c47b42338f45ed76374dc90ae0dc4b707c33f9ed","modified":1549012825192},{"_id":"public/tags/科技/index.html","hash":"18efbb2e48c6e48b3302d7e0154bb3c2338e2bca","modified":1549012825192},{"_id":"public/tags/技术/index.html","hash":"adf7ab70817790f17ca14b7ff6fba275fb189747","modified":1549012825192},{"_id":"public/2019/01/11/浅谈Android内存优化/index.html","hash":"8b4d484808947968828935df6421e22651687e66","modified":1549012825193},{"_id":"public/2018/12/31/2018年终总结/index.html","hash":"bb8d51c820cb11a7c8199afd1e2bcba428b82a5e","modified":1549012825193},{"_id":"public/2018/12/25/二维码为何长这个样子/index.html","hash":"851d9d89141a69fd789dd12d516d7607d24732fc","modified":1549012825193},{"_id":"public/2018/12/22/博客搭建之路/index.html","hash":"d01942634854e49b3768bd6049cd35ffaf76ef9a","modified":1549012825193},{"_id":"public/2018/12/05/来聊聊我的新博客/index.html","hash":"ccd3c9d4dd7e67dea6b8cfc6800fa266098fd66b","modified":1549012825193},{"_id":"public/index.html","hash":"41c2ecd13e946f3f15c1e91cb34e24dd59b19dc5","modified":1549012825193},{"_id":"public/CNAME","hash":"babc79ac946f9c86318d34809fffe251ce461948","modified":1549012825199},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1549012825199},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1549012825199},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1549012825199},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1549012825199},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1549012825199},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1549012825199},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1549012825199},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1549012825199},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1549012825199},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1549012825199},{"_id":"public/images/logo.png","hash":"ecfd638922ed3ee81cdbf8528dde23db8aa3110f","modified":1549012825199},{"_id":"public/images/logo.svg","hash":"ff03bd8d089985fdfea8a900337b1d5e7fd8e4ff","modified":1549012825199},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1549012825199},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1549012825199},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1549012825199},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1549012825200},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1549012825200},{"_id":"public/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1549012825200},{"_id":"public/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1549012825200},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1549012825200},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1549012825599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1549012825601},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1549012825603},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1549012825603},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1549012825604},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1549012825604},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1549012825604},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1549012825604},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1549012825604},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1549012825604},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1549012825604},{"_id":"public/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1549012825604},{"_id":"public/lib/fancybox/README.html","hash":"acfa25ca9b6457a4a70a4b35cf72c9dafc33584e","modified":1549012825604},{"_id":"public/lib/needsharebutton/README.html","hash":"16294954bab07c47f87edf3742ab2547c63d5193","modified":1549012825604},{"_id":"public/css/main.css","hash":"8554d9956ae55b323650e9bacb8dc50be8c97e67","modified":1549012825604},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1549012825605},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1549012825607},{"_id":"public/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1549012825607},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1549012825607},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1549012825607},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1549012825608},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1549012825608},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1549012825610},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1549012825610},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1549012825612},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1549012825616},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1549012825616},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1549012825616},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1549012825620},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1549012825621},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1549012825625},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1549012825631},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1549012825631},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1549012825633}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-12-23T02:21:53.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-23 10:21:53\ntype: \"tags\"\n---\n\n","updated":"2018-12-24T03:05:09.673Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjrlu8ohv0007m9a2kltnlnnc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018年终总结","date":"2018-12-31T10:52:15.000Z","_content":"\n![](https://img.carlwe.com/summary_of_2018.jpg)\n\n> 写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。\n\n<!--more-->\n\n没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。\n\n> 这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。\n\n## 和武汉说再见\n\n离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。\n\n在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。\n\n从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。\n\n![](http://img.carlwe.com/IMG_0644.jpg)\n\n## 去云南\n\n记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！\n\n![](http://img.carlwe.com/IMG_1970.jpg)\n\n## 遇见大玩家\n\n- 找工作\n\n从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。\n\n- 新的工作环境\n\n公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。\n\n![](http://img.carlwe.com/sanlitun_soho.jpg)\n\n## 重温北京\n\n工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用**重温北京**来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：\n\n* 北京天文馆\n\n![](http://img.carlwe.com/planetarium.jpg)\n\n* 国家图书馆\n\n![](http://img.carlwe.com/national_library.jpg)\n\n* 首都图书馆\n\n![](http://img.carlwe.com/capital_library.jpg)\n\n* 中国科技馆\n\n![](http://img.carlwe.com/science_museum.jpg)\n\n* 中国美术馆\n\n![](http://img.carlwe.com/meishuguan.jpg)\n\n* 北京大学\n\n![](http://img.carlwe.com/pku.jpg)\n\n* 香山公园\n\n![](http://img.carlwe.com/IMG_3315.jpg)\n\n* 十三陵\n\n![](http://img.carlwe.com/shisanlin.jpg)\n\n* 十渡\n\n![](http://img.carlwe.com/shidu.jpg)\n\n但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。\n\n## 再次起航\n\n十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：\n\n- 博客\n\n> 一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。\n\n- 小游戏\n\n>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。\n\n最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。\n\n![](http://img.carlwe.com/qingdao.jpg)\n\n## 总结\n\n2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018年终总结.md","raw":"---\ntitle: 2018年终总结\ndate: 2018-12-31 18:52:15\ntags: 生活\n---\n\n![](https://img.carlwe.com/summary_of_2018.jpg)\n\n> 写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。\n\n<!--more-->\n\n没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。\n\n> 这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。\n\n## 和武汉说再见\n\n离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。\n\n在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。\n\n从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。\n\n![](http://img.carlwe.com/IMG_0644.jpg)\n\n## 去云南\n\n记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！\n\n![](http://img.carlwe.com/IMG_1970.jpg)\n\n## 遇见大玩家\n\n- 找工作\n\n从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。\n\n- 新的工作环境\n\n公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。\n\n![](http://img.carlwe.com/sanlitun_soho.jpg)\n\n## 重温北京\n\n工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用**重温北京**来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：\n\n* 北京天文馆\n\n![](http://img.carlwe.com/planetarium.jpg)\n\n* 国家图书馆\n\n![](http://img.carlwe.com/national_library.jpg)\n\n* 首都图书馆\n\n![](http://img.carlwe.com/capital_library.jpg)\n\n* 中国科技馆\n\n![](http://img.carlwe.com/science_museum.jpg)\n\n* 中国美术馆\n\n![](http://img.carlwe.com/meishuguan.jpg)\n\n* 北京大学\n\n![](http://img.carlwe.com/pku.jpg)\n\n* 香山公园\n\n![](http://img.carlwe.com/IMG_3315.jpg)\n\n* 十三陵\n\n![](http://img.carlwe.com/shisanlin.jpg)\n\n* 十渡\n\n![](http://img.carlwe.com/shidu.jpg)\n\n但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。\n\n## 再次起航\n\n十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：\n\n- 博客\n\n> 一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。\n\n- 小游戏\n\n>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。\n\n最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。\n\n![](http://img.carlwe.com/qingdao.jpg)\n\n## 总结\n\n2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。\n\n\n\n\n\n\n\n\n\n","slug":"2018年终总结","published":1,"updated":"2019-01-02T03:06:51.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrlu8ocu0000m9a2mx7q6een","content":"<p><img src=\"https://img.carlwe.com/summary_of_2018.jpg\" alt=\"\"></p>\n<blockquote>\n<p>写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。</p>\n<blockquote>\n<p>这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。</p>\n</blockquote>\n<h2 id=\"和武汉说再见\"><a href=\"#和武汉说再见\" class=\"headerlink\" title=\"和武汉说再见\"></a>和武汉说再见</h2><p>离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。</p>\n<p>在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。</p>\n<p>从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。</p>\n<p><img src=\"http://img.carlwe.com/IMG_0644.jpg\" alt=\"\"></p>\n<h2 id=\"去云南\"><a href=\"#去云南\" class=\"headerlink\" title=\"去云南\"></a>去云南</h2><p>记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！</p>\n<p><img src=\"http://img.carlwe.com/IMG_1970.jpg\" alt=\"\"></p>\n<h2 id=\"遇见大玩家\"><a href=\"#遇见大玩家\" class=\"headerlink\" title=\"遇见大玩家\"></a>遇见大玩家</h2><ul>\n<li>找工作</li>\n</ul>\n<p>从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。</p>\n<ul>\n<li>新的工作环境</li>\n</ul>\n<p>公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。</p>\n<p><img src=\"http://img.carlwe.com/sanlitun_soho.jpg\" alt=\"\"></p>\n<h2 id=\"重温北京\"><a href=\"#重温北京\" class=\"headerlink\" title=\"重温北京\"></a>重温北京</h2><p>工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用<strong>重温北京</strong>来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：</p>\n<ul>\n<li>北京天文馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/planetarium.jpg\" alt=\"\"></p>\n<ul>\n<li>国家图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/national_library.jpg\" alt=\"\"></p>\n<ul>\n<li>首都图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/capital_library.jpg\" alt=\"\"></p>\n<ul>\n<li>中国科技馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/science_museum.jpg\" alt=\"\"></p>\n<ul>\n<li>中国美术馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/meishuguan.jpg\" alt=\"\"></p>\n<ul>\n<li>北京大学</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/pku.jpg\" alt=\"\"></p>\n<ul>\n<li>香山公园</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/IMG_3315.jpg\" alt=\"\"></p>\n<ul>\n<li>十三陵</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shisanlin.jpg\" alt=\"\"></p>\n<ul>\n<li>十渡</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shidu.jpg\" alt=\"\"></p>\n<p>但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。</p>\n<h2 id=\"再次起航\"><a href=\"#再次起航\" class=\"headerlink\" title=\"再次起航\"></a>再次起航</h2><p>十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：</p>\n<ul>\n<li>博客</li>\n</ul>\n<blockquote>\n<p>一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。</p>\n</blockquote>\n<ul>\n<li>小游戏</li>\n</ul>\n<blockquote>\n<p>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。</p>\n</blockquote>\n<p>最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。</p>\n<p><img src=\"http://img.carlwe.com/qingdao.jpg\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/summary_of_2018.jpg\" alt=\"\"></p>\n<blockquote>\n<p>写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。</p>\n</blockquote>","more":"<p>没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。</p>\n<blockquote>\n<p>这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。</p>\n</blockquote>\n<h2 id=\"和武汉说再见\"><a href=\"#和武汉说再见\" class=\"headerlink\" title=\"和武汉说再见\"></a>和武汉说再见</h2><p>离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。</p>\n<p>在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。</p>\n<p>从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。</p>\n<p><img src=\"http://img.carlwe.com/IMG_0644.jpg\" alt=\"\"></p>\n<h2 id=\"去云南\"><a href=\"#去云南\" class=\"headerlink\" title=\"去云南\"></a>去云南</h2><p>记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！</p>\n<p><img src=\"http://img.carlwe.com/IMG_1970.jpg\" alt=\"\"></p>\n<h2 id=\"遇见大玩家\"><a href=\"#遇见大玩家\" class=\"headerlink\" title=\"遇见大玩家\"></a>遇见大玩家</h2><ul>\n<li>找工作</li>\n</ul>\n<p>从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。</p>\n<ul>\n<li>新的工作环境</li>\n</ul>\n<p>公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。</p>\n<p><img src=\"http://img.carlwe.com/sanlitun_soho.jpg\" alt=\"\"></p>\n<h2 id=\"重温北京\"><a href=\"#重温北京\" class=\"headerlink\" title=\"重温北京\"></a>重温北京</h2><p>工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用<strong>重温北京</strong>来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：</p>\n<ul>\n<li>北京天文馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/planetarium.jpg\" alt=\"\"></p>\n<ul>\n<li>国家图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/national_library.jpg\" alt=\"\"></p>\n<ul>\n<li>首都图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/capital_library.jpg\" alt=\"\"></p>\n<ul>\n<li>中国科技馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/science_museum.jpg\" alt=\"\"></p>\n<ul>\n<li>中国美术馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/meishuguan.jpg\" alt=\"\"></p>\n<ul>\n<li>北京大学</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/pku.jpg\" alt=\"\"></p>\n<ul>\n<li>香山公园</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/IMG_3315.jpg\" alt=\"\"></p>\n<ul>\n<li>十三陵</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shisanlin.jpg\" alt=\"\"></p>\n<ul>\n<li>十渡</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shidu.jpg\" alt=\"\"></p>\n<p>但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。</p>\n<h2 id=\"再次起航\"><a href=\"#再次起航\" class=\"headerlink\" title=\"再次起航\"></a>再次起航</h2><p>十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：</p>\n<ul>\n<li>博客</li>\n</ul>\n<blockquote>\n<p>一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。</p>\n</blockquote>\n<ul>\n<li>小游戏</li>\n</ul>\n<blockquote>\n<p>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。</p>\n</blockquote>\n<p>最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。</p>\n<p><img src=\"http://img.carlwe.com/qingdao.jpg\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。</p>"},{"title":"来聊聊我的新博客","date":"2018-12-05T04:25:13.000Z","_content":"## 为什么要写博客🤔\n\n![](https://img.carlwe.com/whyblog.png)\n\n时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。<!--more-->但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。\n\n### 那为什么要自建网站写博客呢\n\n其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想**安静的记录自己想表达的东西**，才会显得与众不同吧。\n\n同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。\n\n## 我会写哪些东西\n\n其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该**为了写博客而去写博客**，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：\n\n- 技术类\n\n>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。\n\n- 科技类\n\n>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。\n\n- 摄影类\n\n> 介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到**你看了就会** 。\n\n- 天文类\n\n> 当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。\n\n- 生活类\n\n>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。\n\n## 博客里面可以做什么\n\n这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。\n\n* 关于评论\n\n>**就是它Valine**，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。\n>\n>**如何拥有评论头像**，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 [Gravatar](https://en.gravatar.com/) 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。[Gravatar](https://en.gravatar.com/) 很多评论系统及网站都支持，所以可以注册一个留着以后用。\n>\n>**其他**，评论支持MarkDown，如果不知道如何使用请点击评论左下角的[M↓](https://segmentfault.com/markdown) 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。\n\n* 关于分享\n\n> 本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～\n\n## 如何访问\n\n博客可以通过网址来访问 [carlwe.com](https://www.carlwe.com) \n\n- 为什么是 **CarlWe **\n\n> 虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂\n\n最后请记住 👉🏻 **carlwe.com**\n\n\n\n","source":"_posts/来聊聊我的新博客.md","raw":"---\ntitle: 来聊聊我的新博客\ndate: 2018-12-05 12:25:13\ntags: 生活\n---\n## 为什么要写博客🤔\n\n![](https://img.carlwe.com/whyblog.png)\n\n时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。<!--more-->但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。\n\n### 那为什么要自建网站写博客呢\n\n其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想**安静的记录自己想表达的东西**，才会显得与众不同吧。\n\n同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。\n\n## 我会写哪些东西\n\n其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该**为了写博客而去写博客**，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：\n\n- 技术类\n\n>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。\n\n- 科技类\n\n>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。\n\n- 摄影类\n\n> 介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到**你看了就会** 。\n\n- 天文类\n\n> 当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。\n\n- 生活类\n\n>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。\n\n## 博客里面可以做什么\n\n这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。\n\n* 关于评论\n\n>**就是它Valine**，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。\n>\n>**如何拥有评论头像**，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 [Gravatar](https://en.gravatar.com/) 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。[Gravatar](https://en.gravatar.com/) 很多评论系统及网站都支持，所以可以注册一个留着以后用。\n>\n>**其他**，评论支持MarkDown，如果不知道如何使用请点击评论左下角的[M↓](https://segmentfault.com/markdown) 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。\n\n* 关于分享\n\n> 本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～\n\n## 如何访问\n\n博客可以通过网址来访问 [carlwe.com](https://www.carlwe.com) \n\n- 为什么是 **CarlWe **\n\n> 虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂\n\n最后请记住 👉🏻 **carlwe.com**\n\n\n\n","slug":"来聊聊我的新博客","published":1,"updated":"2019-01-15T09:30:38.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrlu8ocy0001m9a2y66fvlih","content":"<h2 id=\"为什么要写博客🤔\"><a href=\"#为什么要写博客🤔\" class=\"headerlink\" title=\"为什么要写博客🤔\"></a>为什么要写博客🤔</h2><p><img src=\"https://img.carlwe.com/whyblog.png\" alt=\"\"></p>\n<p>时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。<a id=\"more\"></a>但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。</p>\n<h3 id=\"那为什么要自建网站写博客呢\"><a href=\"#那为什么要自建网站写博客呢\" class=\"headerlink\" title=\"那为什么要自建网站写博客呢\"></a>那为什么要自建网站写博客呢</h3><p>其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想<strong>安静的记录自己想表达的东西</strong>，才会显得与众不同吧。</p>\n<p>同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。</p>\n<h2 id=\"我会写哪些东西\"><a href=\"#我会写哪些东西\" class=\"headerlink\" title=\"我会写哪些东西\"></a>我会写哪些东西</h2><p>其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该<strong>为了写博客而去写博客</strong>，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：</p>\n<ul>\n<li>技术类</li>\n</ul>\n<blockquote>\n<p>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。</p>\n</blockquote>\n<ul>\n<li>科技类</li>\n</ul>\n<blockquote>\n<p>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。</p>\n</blockquote>\n<ul>\n<li>摄影类</li>\n</ul>\n<blockquote>\n<p>介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到<strong>你看了就会</strong> 。</p>\n</blockquote>\n<ul>\n<li>天文类</li>\n</ul>\n<blockquote>\n<p>当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。</p>\n</blockquote>\n<ul>\n<li>生活类</li>\n</ul>\n<blockquote>\n<p>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。</p>\n</blockquote>\n<h2 id=\"博客里面可以做什么\"><a href=\"#博客里面可以做什么\" class=\"headerlink\" title=\"博客里面可以做什么\"></a>博客里面可以做什么</h2><p>这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。</p>\n<ul>\n<li>关于评论</li>\n</ul>\n<blockquote>\n<p><strong>就是它Valine</strong>，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。</p>\n<p><strong>如何拥有评论头像</strong>，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 <a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。<a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 很多评论系统及网站都支持，所以可以注册一个留着以后用。</p>\n<p><strong>其他</strong>，评论支持MarkDown，如果不知道如何使用请点击评论左下角的<a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">M↓</a> 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。</p>\n</blockquote>\n<ul>\n<li>关于分享</li>\n</ul>\n<blockquote>\n<p>本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～</p>\n</blockquote>\n<h2 id=\"如何访问\"><a href=\"#如何访问\" class=\"headerlink\" title=\"如何访问\"></a>如何访问</h2><p>博客可以通过网址来访问 <a href=\"https://www.carlwe.com\" target=\"_blank\" rel=\"noopener\">carlwe.com</a> </p>\n<ul>\n<li>为什么是 <strong>CarlWe </strong></li>\n</ul>\n<blockquote>\n<p>虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂</p>\n</blockquote>\n<p>最后请记住 👉🏻 <strong>carlwe.com</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要写博客🤔\"><a href=\"#为什么要写博客🤔\" class=\"headerlink\" title=\"为什么要写博客🤔\"></a>为什么要写博客🤔</h2><p><img src=\"https://img.carlwe.com/whyblog.png\" alt=\"\"></p>\n<p>时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。","more":"但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。</p>\n<h3 id=\"那为什么要自建网站写博客呢\"><a href=\"#那为什么要自建网站写博客呢\" class=\"headerlink\" title=\"那为什么要自建网站写博客呢\"></a>那为什么要自建网站写博客呢</h3><p>其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想<strong>安静的记录自己想表达的东西</strong>，才会显得与众不同吧。</p>\n<p>同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。</p>\n<h2 id=\"我会写哪些东西\"><a href=\"#我会写哪些东西\" class=\"headerlink\" title=\"我会写哪些东西\"></a>我会写哪些东西</h2><p>其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该<strong>为了写博客而去写博客</strong>，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：</p>\n<ul>\n<li>技术类</li>\n</ul>\n<blockquote>\n<p>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。</p>\n</blockquote>\n<ul>\n<li>科技类</li>\n</ul>\n<blockquote>\n<p>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。</p>\n</blockquote>\n<ul>\n<li>摄影类</li>\n</ul>\n<blockquote>\n<p>介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到<strong>你看了就会</strong> 。</p>\n</blockquote>\n<ul>\n<li>天文类</li>\n</ul>\n<blockquote>\n<p>当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。</p>\n</blockquote>\n<ul>\n<li>生活类</li>\n</ul>\n<blockquote>\n<p>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。</p>\n</blockquote>\n<h2 id=\"博客里面可以做什么\"><a href=\"#博客里面可以做什么\" class=\"headerlink\" title=\"博客里面可以做什么\"></a>博客里面可以做什么</h2><p>这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。</p>\n<ul>\n<li>关于评论</li>\n</ul>\n<blockquote>\n<p><strong>就是它Valine</strong>，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。</p>\n<p><strong>如何拥有评论头像</strong>，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 <a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。<a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 很多评论系统及网站都支持，所以可以注册一个留着以后用。</p>\n<p><strong>其他</strong>，评论支持MarkDown，如果不知道如何使用请点击评论左下角的<a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">M↓</a> 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。</p>\n</blockquote>\n<ul>\n<li>关于分享</li>\n</ul>\n<blockquote>\n<p>本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～</p>\n</blockquote>\n<h2 id=\"如何访问\"><a href=\"#如何访问\" class=\"headerlink\" title=\"如何访问\"></a>如何访问</h2><p>博客可以通过网址来访问 <a href=\"https://www.carlwe.com\" target=\"_blank\" rel=\"noopener\">carlwe.com</a> </p>\n<ul>\n<li>为什么是 <strong>CarlWe </strong></li>\n</ul>\n<blockquote>\n<p>虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂</p>\n</blockquote>\n<p>最后请记住 👉🏻 <strong>carlwe.com</strong></p>"},{"title":"博客搭建之路","date":"2018-12-22T07:26:37.000Z","_content":"\n![](https://img.carlwe.com/successRoad.png)\n\n> 前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。\n\n<!--more-->\n\n但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。\n\n## 博客应该是什么样子呢\n\n首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：\n\n- 搭建博客方便\n- 简洁的博客界面\n- 友好的文章撰写工具\n- 博客能够方便的评论\n\n我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。\n\n## 开始搭建\n\n> 在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。\n\n### 一、快速搭建\n\n![](https://img.carlwe.com/hexo.png-s)\n\n- 挑选\n\n> 简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有**[WordPress](https://cn.wordpress.org)**和**[Hexo](https://hexo.io)**，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：\n>\n> > Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n>\n> 可见其速度也非常快，到这里博客框架我们就选好了。\n\n- 搭建\n\n> Hexo的搭建可以参考[Hexo官方文档](https://hexo.io/zh-cn/docs/)，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：\n>\n> 1. 配置环境（Node.js、Git、Hexo）\n> 2. 建站（在电脑本地的一个文件夹下执行 `hexo init` 生成网站所需的文件）\n> 3. 配置（在 `_config.yml` 文件中配置网站的标题、名称等信息）\n>\n> 完成上述三个步骤之后就可以通过顺次执行 `hexo g` 和 `hexo s` 在本地浏览器中进行预览了。\n\n- 部署\n\n![](https://img.carlwe.com/coding.png-s)\n\n>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐[Coding](https://dev.tencent.com/)（服务器在国内访问速度快）。部署步骤如下：\n>1. 注册Coding账号、创建一个项目、开通Pages服务。\n>\n>2. 修改博客配置文件 `_config.yml` 最后面的 `deploy` 的 `repo` 加上:\n>\n>   `coding: https://git.dev.tencent.com/AccountName/ProJectName.git`\n>\n>3. 执行 `hexo g -d` 部署成功之后，你就可以通过例如：[1649201921.coding.me/blog](https://1649201921.coding.me/blog) 让其他人来访问你的博客。\n>\n>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下**最好购买能够备案的域名！！！**\n\n### 二、优化界面\n\n![](https://img.carlwe.com/NexT_logo.svg)\n\n- 挑选\n\n> 虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的**“皮肤”**。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的[主题页面](https://hexo.io/themes/)来挑选你所喜爱的主题。在这里我推荐两个主题：\n>\n> - [Yilia](https://github.com/litten/hexo-theme-yilia)\n> - [NexT](https://github.com/theme-next/hexo-theme-next)\n>\n> 我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。\n\n- 配置主题\n\n>主题的配置也很简单，分为如下三步：\n>\n>1. 安装，将主题clone到本地的 `themes/next` 文件夹下。\n>2. 配置博客根目录下的 `_config.yml` 修改为 `theme: next` 。\n>3. 配置主题文件下的 `_config.yml` ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 [NexT 使用文档](http://theme-next.iissnan.com/) 。\n\n到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。\n\n### 三、开始书写\n\n![](https://img.carlwe.com/typora_logo.png-s)\n\n对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。\n\n* 学习MarkDown语法\n\n> 对于MarkDown的学习快速上手可以参考这里👉 [segmentfault](https://segmentfault.com/markdown)\n>\n> 详细的MarkDown语法可以参考这里👉 [简书](https://www.jianshu.com/p/191d1e21f7ed)\n>\n\n- 挑选MarkDown编辑器\n\n> 熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。\n>\n> - [CmdMarkDown](https://www.zybuluo.com/mdeditor)\n> - [Typora](https://www.typora.io/)\n>\n> 最开始用的是作业部落[CmdMarkDown](https://www.zybuluo.com/mdeditor)好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。\n\n- 图片怎么办🤔 \n\n![](https://img.carlwe.com/qiniu_logo.png)\n\n>  博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：\n>\n> - [七牛云对象存储](https://www.qiniu.com/products/kodo)\n> - [阿里云对象存储](https://www.aliyun.com/product/oss)\n>\n> 本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。\n>\n> 再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。\n>\n> 如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：[img.carlwe.com/whyblog.png](https://img.carlwe.com/whyblog.png)\n\n- 通过使用iPic让添加图片更方便\n\n![](https://img.carlwe.com/iPic.png-s)\n\n>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片->打开网站->上传图片->复制链接->编辑 `![图片名称](链接)` ->把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。\n>\n>- [iPic](https://toolinbox.net/iPic/)\n>\n>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。\n\n- 通过TinyPNG4Mac来压缩图片\n\n![](https://img.carlwe.com/TinyPNG4Mac.png-s)\n\n>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！\n>\n>👉[TinyPNG4Mac](https://github.com/kyleduo/TinyPNG4Mac)\n\n### 四、评论系统\n\n![](https://img.carlwe.com/valine.png-s)\n\n通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。\n\n* 挑选\n\n> 之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：\n>\n> - [Valine](https://valine.js.org/)\n>\n> 优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。\n\n- 接入\n\n> 配置主题文件下的 `_config.yml` 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 [快速开始](https://valine.js.org/quickstart.html)\n\n作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。\n\n## 总结及完善\n\n通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：\n\n>1. 尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。\n>2. 遇到问题不要放弃，多尝试。\n>3. 博客搭建容易，难的是坚持写博客。\n\n虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：\n\n>1. 能够友好的分享到微信好友及朋友圈\n>2. 更好的图片、音频、视频浏览体验\n>3. 博客较多时开通搜索功能\n>4. 创建自定义的文章分类\n\n这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。","source":"_posts/博客搭建之路.md","raw":"---\ntitle: 博客搭建之路\ndate: 2018-12-22 15:26:37\ntags: 科技\n---\n\n![](https://img.carlwe.com/successRoad.png)\n\n> 前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。\n\n<!--more-->\n\n但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。\n\n## 博客应该是什么样子呢\n\n首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：\n\n- 搭建博客方便\n- 简洁的博客界面\n- 友好的文章撰写工具\n- 博客能够方便的评论\n\n我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。\n\n## 开始搭建\n\n> 在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。\n\n### 一、快速搭建\n\n![](https://img.carlwe.com/hexo.png-s)\n\n- 挑选\n\n> 简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有**[WordPress](https://cn.wordpress.org)**和**[Hexo](https://hexo.io)**，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：\n>\n> > Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n>\n> 可见其速度也非常快，到这里博客框架我们就选好了。\n\n- 搭建\n\n> Hexo的搭建可以参考[Hexo官方文档](https://hexo.io/zh-cn/docs/)，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：\n>\n> 1. 配置环境（Node.js、Git、Hexo）\n> 2. 建站（在电脑本地的一个文件夹下执行 `hexo init` 生成网站所需的文件）\n> 3. 配置（在 `_config.yml` 文件中配置网站的标题、名称等信息）\n>\n> 完成上述三个步骤之后就可以通过顺次执行 `hexo g` 和 `hexo s` 在本地浏览器中进行预览了。\n\n- 部署\n\n![](https://img.carlwe.com/coding.png-s)\n\n>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐[Coding](https://dev.tencent.com/)（服务器在国内访问速度快）。部署步骤如下：\n>1. 注册Coding账号、创建一个项目、开通Pages服务。\n>\n>2. 修改博客配置文件 `_config.yml` 最后面的 `deploy` 的 `repo` 加上:\n>\n>   `coding: https://git.dev.tencent.com/AccountName/ProJectName.git`\n>\n>3. 执行 `hexo g -d` 部署成功之后，你就可以通过例如：[1649201921.coding.me/blog](https://1649201921.coding.me/blog) 让其他人来访问你的博客。\n>\n>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下**最好购买能够备案的域名！！！**\n\n### 二、优化界面\n\n![](https://img.carlwe.com/NexT_logo.svg)\n\n- 挑选\n\n> 虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的**“皮肤”**。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的[主题页面](https://hexo.io/themes/)来挑选你所喜爱的主题。在这里我推荐两个主题：\n>\n> - [Yilia](https://github.com/litten/hexo-theme-yilia)\n> - [NexT](https://github.com/theme-next/hexo-theme-next)\n>\n> 我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。\n\n- 配置主题\n\n>主题的配置也很简单，分为如下三步：\n>\n>1. 安装，将主题clone到本地的 `themes/next` 文件夹下。\n>2. 配置博客根目录下的 `_config.yml` 修改为 `theme: next` 。\n>3. 配置主题文件下的 `_config.yml` ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 [NexT 使用文档](http://theme-next.iissnan.com/) 。\n\n到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。\n\n### 三、开始书写\n\n![](https://img.carlwe.com/typora_logo.png-s)\n\n对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。\n\n* 学习MarkDown语法\n\n> 对于MarkDown的学习快速上手可以参考这里👉 [segmentfault](https://segmentfault.com/markdown)\n>\n> 详细的MarkDown语法可以参考这里👉 [简书](https://www.jianshu.com/p/191d1e21f7ed)\n>\n\n- 挑选MarkDown编辑器\n\n> 熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。\n>\n> - [CmdMarkDown](https://www.zybuluo.com/mdeditor)\n> - [Typora](https://www.typora.io/)\n>\n> 最开始用的是作业部落[CmdMarkDown](https://www.zybuluo.com/mdeditor)好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。\n\n- 图片怎么办🤔 \n\n![](https://img.carlwe.com/qiniu_logo.png)\n\n>  博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：\n>\n> - [七牛云对象存储](https://www.qiniu.com/products/kodo)\n> - [阿里云对象存储](https://www.aliyun.com/product/oss)\n>\n> 本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。\n>\n> 再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。\n>\n> 如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：[img.carlwe.com/whyblog.png](https://img.carlwe.com/whyblog.png)\n\n- 通过使用iPic让添加图片更方便\n\n![](https://img.carlwe.com/iPic.png-s)\n\n>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片->打开网站->上传图片->复制链接->编辑 `![图片名称](链接)` ->把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。\n>\n>- [iPic](https://toolinbox.net/iPic/)\n>\n>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。\n\n- 通过TinyPNG4Mac来压缩图片\n\n![](https://img.carlwe.com/TinyPNG4Mac.png-s)\n\n>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！\n>\n>👉[TinyPNG4Mac](https://github.com/kyleduo/TinyPNG4Mac)\n\n### 四、评论系统\n\n![](https://img.carlwe.com/valine.png-s)\n\n通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。\n\n* 挑选\n\n> 之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：\n>\n> - [Valine](https://valine.js.org/)\n>\n> 优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。\n\n- 接入\n\n> 配置主题文件下的 `_config.yml` 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 [快速开始](https://valine.js.org/quickstart.html)\n\n作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。\n\n## 总结及完善\n\n通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：\n\n>1. 尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。\n>2. 遇到问题不要放弃，多尝试。\n>3. 博客搭建容易，难的是坚持写博客。\n\n虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：\n\n>1. 能够友好的分享到微信好友及朋友圈\n>2. 更好的图片、音频、视频浏览体验\n>3. 博客较多时开通搜索功能\n>4. 创建自定义的文章分类\n\n这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。","slug":"博客搭建之路","published":1,"updated":"2018-12-25T09:19:32.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrlu8ohu0006m9a2s6dpq868","content":"<p><img src=\"https://img.carlwe.com/successRoad.png\" alt=\"\"></p>\n<blockquote>\n<p>前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。</p>\n<h2 id=\"博客应该是什么样子呢\"><a href=\"#博客应该是什么样子呢\" class=\"headerlink\" title=\"博客应该是什么样子呢\"></a>博客应该是什么样子呢</h2><p>首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：</p>\n<ul>\n<li>搭建博客方便</li>\n<li>简洁的博客界面</li>\n<li>友好的文章撰写工具</li>\n<li>博客能够方便的评论</li>\n</ul>\n<p>我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。</p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><blockquote>\n<p>在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。</p>\n</blockquote>\n<h3 id=\"一、快速搭建\"><a href=\"#一、快速搭建\" class=\"headerlink\" title=\"一、快速搭建\"></a>一、快速搭建</h3><p><img src=\"https://img.carlwe.com/hexo.png-s\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有<strong><a href=\"https://cn.wordpress.org\" target=\"_blank\" rel=\"noopener\">WordPress</a></strong>和<strong><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a></strong>，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<p>可见其速度也非常快，到这里博客框架我们就选好了。</p>\n</blockquote>\n<ul>\n<li>搭建</li>\n</ul>\n<blockquote>\n<p>Hexo的搭建可以参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：</p>\n<ol>\n<li>配置环境（Node.js、Git、Hexo）</li>\n<li>建站（在电脑本地的一个文件夹下执行 <code>hexo init</code> 生成网站所需的文件）</li>\n<li>配置（在 <code>_config.yml</code> 文件中配置网站的标题、名称等信息）</li>\n</ol>\n<p>完成上述三个步骤之后就可以通过顺次执行 <code>hexo g</code> 和 <code>hexo s</code> 在本地浏览器中进行预览了。</p>\n</blockquote>\n<ul>\n<li>部署</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/coding.png-s\" alt=\"\"></p>\n<blockquote>\n<p>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐<a href=\"https://dev.tencent.com/\" target=\"_blank\" rel=\"noopener\">Coding</a>（服务器在国内访问速度快）。部署步骤如下：</p>\n<ol>\n<li><p>注册Coding账号、创建一个项目、开通Pages服务。</p>\n</li>\n<li><p>修改博客配置文件 <code>_config.yml</code> 最后面的 <code>deploy</code> 的 <code>repo</code> 加上:</p>\n<p><code>coding: https://git.dev.tencent.com/AccountName/ProJectName.git</code></p>\n</li>\n<li><p>执行 <code>hexo g -d</code> 部署成功之后，你就可以通过例如：<a href=\"https://1649201921.coding.me/blog\" target=\"_blank\" rel=\"noopener\">1649201921.coding.me/blog</a> 让其他人来访问你的博客。</p>\n</li>\n</ol>\n<p>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下<strong>最好购买能够备案的域名！！！</strong></p>\n</blockquote>\n<h3 id=\"二、优化界面\"><a href=\"#二、优化界面\" class=\"headerlink\" title=\"二、优化界面\"></a>二、优化界面</h3><p><img src=\"https://img.carlwe.com/NexT_logo.svg\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的<strong>“皮肤”</strong>。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页面</a>来挑选你所喜爱的主题。在这里我推荐两个主题：</p>\n<ul>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">Yilia</a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a></li>\n</ul>\n<p>我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。</p>\n</blockquote>\n<ul>\n<li>配置主题</li>\n</ul>\n<blockquote>\n<p>主题的配置也很简单，分为如下三步：</p>\n<ol>\n<li>安装，将主题clone到本地的 <code>themes/next</code> 文件夹下。</li>\n<li>配置博客根目录下的 <code>_config.yml</code> 修改为 <code>theme: next</code> 。</li>\n<li>配置主题文件下的 <code>_config.yml</code> ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a> 。</li>\n</ol>\n</blockquote>\n<p>到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。</p>\n<h3 id=\"三、开始书写\"><a href=\"#三、开始书写\" class=\"headerlink\" title=\"三、开始书写\"></a>三、开始书写</h3><p><img src=\"https://img.carlwe.com/typora_logo.png-s\" alt=\"\"></p>\n<p>对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。</p>\n<ul>\n<li>学习MarkDown语法</li>\n</ul>\n<blockquote>\n<p>对于MarkDown的学习快速上手可以参考这里👉 <a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<p>详细的MarkDown语法可以参考这里👉 <a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n</blockquote>\n<ul>\n<li>挑选MarkDown编辑器</li>\n</ul>\n<blockquote>\n<p>熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。</p>\n<ul>\n<li><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a></li>\n<li><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></li>\n</ul>\n<p>最开始用的是作业部落<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a>好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。</p>\n</blockquote>\n<ul>\n<li>图片怎么办🤔 </li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qiniu_logo.png\" alt=\"\"></p>\n<blockquote>\n<p> 博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：</p>\n<ul>\n<li><a href=\"https://www.qiniu.com/products/kodo\" target=\"_blank\" rel=\"noopener\">七牛云对象存储</a></li>\n<li><a href=\"https://www.aliyun.com/product/oss\" target=\"_blank\" rel=\"noopener\">阿里云对象存储</a></li>\n</ul>\n<p>本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。</p>\n<p>再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。</p>\n<p>如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：<a href=\"https://img.carlwe.com/whyblog.png\" target=\"_blank\" rel=\"noopener\">img.carlwe.com/whyblog.png</a></p>\n</blockquote>\n<ul>\n<li>通过使用iPic让添加图片更方便</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/iPic.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片-&gt;打开网站-&gt;上传图片-&gt;复制链接-&gt;编辑 <code>![图片名称](链接)</code> -&gt;把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。</p>\n<ul>\n<li><a href=\"https://toolinbox.net/iPic/\" target=\"_blank\" rel=\"noopener\">iPic</a></li>\n</ul>\n<p>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。</p>\n</blockquote>\n<ul>\n<li>通过TinyPNG4Mac来压缩图片</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/TinyPNG4Mac.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！</p>\n<p>👉<a href=\"https://github.com/kyleduo/TinyPNG4Mac\" target=\"_blank\" rel=\"noopener\">TinyPNG4Mac</a></p>\n</blockquote>\n<h3 id=\"四、评论系统\"><a href=\"#四、评论系统\" class=\"headerlink\" title=\"四、评论系统\"></a>四、评论系统</h3><p><img src=\"https://img.carlwe.com/valine.png-s\" alt=\"\"></p>\n<p>通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。</p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：</p>\n<ul>\n<li><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a></li>\n</ul>\n<p>优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。</p>\n</blockquote>\n<ul>\n<li>接入</li>\n</ul>\n<blockquote>\n<p>配置主题文件下的 <code>_config.yml</code> 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 <a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">快速开始</a></p>\n</blockquote>\n<p>作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。</p>\n<h2 id=\"总结及完善\"><a href=\"#总结及完善\" class=\"headerlink\" title=\"总结及完善\"></a>总结及完善</h2><p>通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：</p>\n<blockquote>\n<ol>\n<li>尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。</li>\n<li>遇到问题不要放弃，多尝试。</li>\n<li>博客搭建容易，难的是坚持写博客。</li>\n</ol>\n</blockquote>\n<p>虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：</p>\n<blockquote>\n<ol>\n<li>能够友好的分享到微信好友及朋友圈</li>\n<li>更好的图片、音频、视频浏览体验</li>\n<li>博客较多时开通搜索功能</li>\n<li>创建自定义的文章分类</li>\n</ol>\n</blockquote>\n<p>这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/successRoad.png\" alt=\"\"></p>\n<blockquote>\n<p>前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。</p>\n</blockquote>","more":"<p>但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。</p>\n<h2 id=\"博客应该是什么样子呢\"><a href=\"#博客应该是什么样子呢\" class=\"headerlink\" title=\"博客应该是什么样子呢\"></a>博客应该是什么样子呢</h2><p>首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：</p>\n<ul>\n<li>搭建博客方便</li>\n<li>简洁的博客界面</li>\n<li>友好的文章撰写工具</li>\n<li>博客能够方便的评论</li>\n</ul>\n<p>我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。</p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><blockquote>\n<p>在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。</p>\n</blockquote>\n<h3 id=\"一、快速搭建\"><a href=\"#一、快速搭建\" class=\"headerlink\" title=\"一、快速搭建\"></a>一、快速搭建</h3><p><img src=\"https://img.carlwe.com/hexo.png-s\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有<strong><a href=\"https://cn.wordpress.org\" target=\"_blank\" rel=\"noopener\">WordPress</a></strong>和<strong><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a></strong>，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<p>可见其速度也非常快，到这里博客框架我们就选好了。</p>\n</blockquote>\n<ul>\n<li>搭建</li>\n</ul>\n<blockquote>\n<p>Hexo的搭建可以参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：</p>\n<ol>\n<li>配置环境（Node.js、Git、Hexo）</li>\n<li>建站（在电脑本地的一个文件夹下执行 <code>hexo init</code> 生成网站所需的文件）</li>\n<li>配置（在 <code>_config.yml</code> 文件中配置网站的标题、名称等信息）</li>\n</ol>\n<p>完成上述三个步骤之后就可以通过顺次执行 <code>hexo g</code> 和 <code>hexo s</code> 在本地浏览器中进行预览了。</p>\n</blockquote>\n<ul>\n<li>部署</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/coding.png-s\" alt=\"\"></p>\n<blockquote>\n<p>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐<a href=\"https://dev.tencent.com/\" target=\"_blank\" rel=\"noopener\">Coding</a>（服务器在国内访问速度快）。部署步骤如下：</p>\n<ol>\n<li><p>注册Coding账号、创建一个项目、开通Pages服务。</p>\n</li>\n<li><p>修改博客配置文件 <code>_config.yml</code> 最后面的 <code>deploy</code> 的 <code>repo</code> 加上:</p>\n<p><code>coding: https://git.dev.tencent.com/AccountName/ProJectName.git</code></p>\n</li>\n<li><p>执行 <code>hexo g -d</code> 部署成功之后，你就可以通过例如：<a href=\"https://1649201921.coding.me/blog\" target=\"_blank\" rel=\"noopener\">1649201921.coding.me/blog</a> 让其他人来访问你的博客。</p>\n</li>\n</ol>\n<p>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下<strong>最好购买能够备案的域名！！！</strong></p>\n</blockquote>\n<h3 id=\"二、优化界面\"><a href=\"#二、优化界面\" class=\"headerlink\" title=\"二、优化界面\"></a>二、优化界面</h3><p><img src=\"https://img.carlwe.com/NexT_logo.svg\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的<strong>“皮肤”</strong>。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页面</a>来挑选你所喜爱的主题。在这里我推荐两个主题：</p>\n<ul>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">Yilia</a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a></li>\n</ul>\n<p>我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。</p>\n</blockquote>\n<ul>\n<li>配置主题</li>\n</ul>\n<blockquote>\n<p>主题的配置也很简单，分为如下三步：</p>\n<ol>\n<li>安装，将主题clone到本地的 <code>themes/next</code> 文件夹下。</li>\n<li>配置博客根目录下的 <code>_config.yml</code> 修改为 <code>theme: next</code> 。</li>\n<li>配置主题文件下的 <code>_config.yml</code> ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a> 。</li>\n</ol>\n</blockquote>\n<p>到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。</p>\n<h3 id=\"三、开始书写\"><a href=\"#三、开始书写\" class=\"headerlink\" title=\"三、开始书写\"></a>三、开始书写</h3><p><img src=\"https://img.carlwe.com/typora_logo.png-s\" alt=\"\"></p>\n<p>对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。</p>\n<ul>\n<li>学习MarkDown语法</li>\n</ul>\n<blockquote>\n<p>对于MarkDown的学习快速上手可以参考这里👉 <a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<p>详细的MarkDown语法可以参考这里👉 <a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n</blockquote>\n<ul>\n<li>挑选MarkDown编辑器</li>\n</ul>\n<blockquote>\n<p>熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。</p>\n<ul>\n<li><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a></li>\n<li><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></li>\n</ul>\n<p>最开始用的是作业部落<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a>好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。</p>\n</blockquote>\n<ul>\n<li>图片怎么办🤔 </li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qiniu_logo.png\" alt=\"\"></p>\n<blockquote>\n<p> 博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：</p>\n<ul>\n<li><a href=\"https://www.qiniu.com/products/kodo\" target=\"_blank\" rel=\"noopener\">七牛云对象存储</a></li>\n<li><a href=\"https://www.aliyun.com/product/oss\" target=\"_blank\" rel=\"noopener\">阿里云对象存储</a></li>\n</ul>\n<p>本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。</p>\n<p>再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。</p>\n<p>如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：<a href=\"https://img.carlwe.com/whyblog.png\" target=\"_blank\" rel=\"noopener\">img.carlwe.com/whyblog.png</a></p>\n</blockquote>\n<ul>\n<li>通过使用iPic让添加图片更方便</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/iPic.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片-&gt;打开网站-&gt;上传图片-&gt;复制链接-&gt;编辑 <code>![图片名称](链接)</code> -&gt;把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。</p>\n<ul>\n<li><a href=\"https://toolinbox.net/iPic/\" target=\"_blank\" rel=\"noopener\">iPic</a></li>\n</ul>\n<p>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。</p>\n</blockquote>\n<ul>\n<li>通过TinyPNG4Mac来压缩图片</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/TinyPNG4Mac.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！</p>\n<p>👉<a href=\"https://github.com/kyleduo/TinyPNG4Mac\" target=\"_blank\" rel=\"noopener\">TinyPNG4Mac</a></p>\n</blockquote>\n<h3 id=\"四、评论系统\"><a href=\"#四、评论系统\" class=\"headerlink\" title=\"四、评论系统\"></a>四、评论系统</h3><p><img src=\"https://img.carlwe.com/valine.png-s\" alt=\"\"></p>\n<p>通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。</p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：</p>\n<ul>\n<li><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a></li>\n</ul>\n<p>优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。</p>\n</blockquote>\n<ul>\n<li>接入</li>\n</ul>\n<blockquote>\n<p>配置主题文件下的 <code>_config.yml</code> 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 <a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">快速开始</a></p>\n</blockquote>\n<p>作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。</p>\n<h2 id=\"总结及完善\"><a href=\"#总结及完善\" class=\"headerlink\" title=\"总结及完善\"></a>总结及完善</h2><p>通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：</p>\n<blockquote>\n<ol>\n<li>尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。</li>\n<li>遇到问题不要放弃，多尝试。</li>\n<li>博客搭建容易，难的是坚持写博客。</li>\n</ol>\n</blockquote>\n<p>虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：</p>\n<blockquote>\n<ol>\n<li>能够友好的分享到微信好友及朋友圈</li>\n<li>更好的图片、音频、视频浏览体验</li>\n<li>博客较多时开通搜索功能</li>\n<li>创建自定义的文章分类</li>\n</ol>\n</blockquote>\n<p>这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。</p>"},{"title":"二维码为何长这个样子","date":"2018-12-25T07:34:59.000Z","_content":"\n![](https://img.carlwe.com/qr_main_logo.png)\n\n> 二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。\n\n<!--more-->\n\n## 简介\n\n二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。\n\n### 二维码分类\n\n* 堆叠式/行排式二维条码\n\n  > 其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。\n\n* 矩阵式二维码\n\n  > 最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。\n\n  ![pdf417-qrcode](https://img.carlwe.com/qr_pdf417-qrcode.png)\n\nQRCode官网：www.qrcode.com\n\n### 二维码的特点\n\n* 存储大容量信息\n\n  >传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。\n\n  ![moredata](https://img.carlwe.com/qr_performanceImage.png)\n\n* 小空间内打印\n\n  ![对比](https://img.carlwe.com/qr_duibi.png)\n\n* 有效表现各种字母\n\n  >QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。\n\n  ![o ya su mi na sai](https://img.carlwe.com/qr_goodnight.png)\n\n* 抗破损能力强\n\n  > QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。\n\n  ![damageImage](https://img.carlwe.com/qr_damageImage.png)\n\n* 任意方向识别\n\n  > QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。\n\n  ![symbolImage](https://img.carlwe.com/qr_symbolImage.png)\n\n* 支持数据合并功能\n\n  >QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。\n\n  ![](https://img.carlwe.com/qr_commonDataImage.png)\n\n### 二维码的版本与纠错能力\n\n#### 二维码版本\n\n> 二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。\n\n![version](https://img.carlwe.com/qr_versionVarietyImage.png)\n\n#### 二维码纠错能力\n\n>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。 \n>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。\n\n![](https://img.carlwe.com/qr_Qrcode_jiucuo.png)\n\n- 纠错使用RS编码\n\n> RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。\n\n#### 二维码尺寸选择\n\n>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。\n>\n>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。 \n>1．假设要输入的数据种类为“数字” 。\n>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”） \n>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。\n\n![](https://img.carlwe.com/qr_select_version.png)\n\n### 二维码的构成\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n* 位置探测图形、位置探测图形分隔符、定位图形：\n\n>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。\n\n* 校正图形\n\n>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。\n\n* 格式信息\n\n> 表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。\n\n* 版本信息\n\n> 即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n* 数据和纠错码字\n\n> 实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。\n\n\n\n## 二维码的生成过程\n\n### 编码过程\n\n#### 编码类型\n\nQR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。\n\n* 数字编码\n\n> 从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。\n\n* 字符编码\n\n> 包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n\n![编码](https://img.carlwe.com/qr_Alphanumeric-mode.png)\n\n![](https://img.carlwe.com/qr_Mode-Indicator.png)\n\n#### 字符编码示例：\n\n* 一、生成数据码\n\n>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n>\n>1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n>2. 两两分组: (10,12) (41,4) (2)\n>3. 把每一组转成11bits的二进制:\n>\n>(10,12) 10x45+12 等于 462 转成 00111001110\n>(41,4) 41x45+4 等于 1849 转成 11100111001\n>(2) 等于 2 转成 000010\n>\n>4. 把这些二进制连接起来：00111001110 11100111001 000010\n>\n>5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n>\n>6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n>\n>7. 添加结束符0000\n>\n>8. 8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000\n>\n>9. 补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。\n>\n>   按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 \n>\n>   上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n* 二、通过数据码生成纠错码\n\n>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n>\n>* **Number of Error Code Correction Blocks** ：需要分多少个块\n>* **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n>\n>![](https://img.carlwe.com/qr_Error-Correction-Blocks.png)\n>\n>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）\n>\n>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n>\n>![](https://img.carlwe.com/qr_jiucuo.png)\n>\n>注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。\n>\n>可参考：https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\n\n* 三、最终编码\n\n>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n>\n>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：\n>\n>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 **11101100 00010001 11101100**\n>\n>Data Codewords如下：\n>\n>| 块 1 | 67   | 85   | 70   | 134  | 87   | 38   | 85   | 194  | 119  | 50   | 6    | 18   | 6    | 103  | 38   |      |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 246  | 246  | 66   | 7    | 118  | 134  | 242  | 7    | 38   | 86   | 22   | 198  | 199  | 146  | 6    |      |\n>| 块 3 | 182  | 230  | 247  | 119  | 50   | 7    | 118  | 134  | 87   | 38   | 82   | 6    | 134  | 151  | 50   | 7    |\n>| 块 4 | 70   | 247  | 118  | 86   | 194  | 6    | 151  | 50   | 16   | 236  | 17   | 236  | 17   | 236  | 17   | 236  |\n>\n>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n>\n>对于纠错码，也是一样：\n>\n>| 块 1 | 213  | 199  | 11   | 45   | 115  | 247  | 241  | 223  | 229  | 248  | 154  | 117  | 154  | 111  | 86   | 161  | 111  | 39   |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 87   | 204  | 96   | 60   | 202  | 182  | 124  | 157  | 200  | 134  | 27   | 129  | 209  | 17   | 163  | 163  | 120  | 133  |\n>| 块 3 | 148  | 116  | 177  | 212  | 76   | 133  | 75   | 242  | 238  | 76   | 195  | 230  | 189  | 10   | 108  | 240  | 192  | 141  |\n>| 块 4 | 235  | 159  | 5    | 173  | 24   | 147  | 59   | 33   | 106  | 40   | 255  | 172  | 82   | 2    | 131  | 32   | 178  | 236  |\n>\n>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n>\n>然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n>\n>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n>\n>这就是我们的数据区。\n\n### 绘制二维码\n\n先看之前这个图\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n#### 添加位置探测图形\n\n> 首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）\n\n![](https://img.carlwe.com/qr_finder.png)\n\n#### 绘制校正图形（ 5*5）\n\n![](https://img.carlwe.com/qr_alignment-pattern.png)\n\n\n\n> 关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）\n\n![](https://img.carlwe.com/qr_Alignment-Position.png)\n\n> 下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![](https://img.carlwe.com/qr_alignment-example.png)\n\n#### 绘制定位图形\n\n> 接下来是定位图形的线。\n\n![](https://img.carlwe.com/qr_Timing-Pattern.png)\n\n> 再接下来是格式信息，下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Format-Information.png)\n\n> 格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）\n\n![](https://img.carlwe.com/qr_Format-Info-bits-postion.png)\n\n>这15个bits中包括：\n>\n>- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n>- 10个纠错bits。主要通过BCH Code来计算\n>\n>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n![](https://img.carlwe.com/qr_Format-Information-Example.png)\n\n> 错误级别：\n\n![](https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png)\n\n#### 添加版本信息\n\n> （版本7以后需要这个编码），下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Version-Information.png)\n\n> 版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例\n\n![](https://img.carlwe.com/qr_Version-Information-Example.png)\n\n> 而其填充位置如下图：\n\n![](https://img.carlwe.com/qr_Version-Information-Position.png)\n\n#### 绘制数据和数据纠错码\n\n> 然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![](https://img.carlwe.com/qr_Data-Placement.png)\n\n#### 转换为掩码图案\n\n>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（**注：选择一个合适的Mask也是有算法的**）\n\n\n\n![](https://img.carlwe.com/qr_masking-pattern.png)\n\n> 其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![](https://img.carlwe.com/qr_Mask-Pattern-Code.png)\n\n> 下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![](https://img.carlwe.com/qr_Masking-Examples.png)\n\n> Mask过后的二维码就成最终的图了。\n\n\n\n## 总结\n\n本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。","source":"_posts/二维码为何长这个样子.md","raw":"---\ntitle: 二维码为何长这个样子\ndate: 2018-12-25 15:34:59\ntags: 科技\n---\n\n![](https://img.carlwe.com/qr_main_logo.png)\n\n> 二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。\n\n<!--more-->\n\n## 简介\n\n二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。\n\n### 二维码分类\n\n* 堆叠式/行排式二维条码\n\n  > 其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。\n\n* 矩阵式二维码\n\n  > 最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。\n\n  ![pdf417-qrcode](https://img.carlwe.com/qr_pdf417-qrcode.png)\n\nQRCode官网：www.qrcode.com\n\n### 二维码的特点\n\n* 存储大容量信息\n\n  >传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。\n\n  ![moredata](https://img.carlwe.com/qr_performanceImage.png)\n\n* 小空间内打印\n\n  ![对比](https://img.carlwe.com/qr_duibi.png)\n\n* 有效表现各种字母\n\n  >QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。\n\n  ![o ya su mi na sai](https://img.carlwe.com/qr_goodnight.png)\n\n* 抗破损能力强\n\n  > QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。\n\n  ![damageImage](https://img.carlwe.com/qr_damageImage.png)\n\n* 任意方向识别\n\n  > QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。\n\n  ![symbolImage](https://img.carlwe.com/qr_symbolImage.png)\n\n* 支持数据合并功能\n\n  >QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。\n\n  ![](https://img.carlwe.com/qr_commonDataImage.png)\n\n### 二维码的版本与纠错能力\n\n#### 二维码版本\n\n> 二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。\n\n![version](https://img.carlwe.com/qr_versionVarietyImage.png)\n\n#### 二维码纠错能力\n\n>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。 \n>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。\n\n![](https://img.carlwe.com/qr_Qrcode_jiucuo.png)\n\n- 纠错使用RS编码\n\n> RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。\n\n#### 二维码尺寸选择\n\n>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。\n>\n>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。 \n>1．假设要输入的数据种类为“数字” 。\n>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”） \n>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。\n\n![](https://img.carlwe.com/qr_select_version.png)\n\n### 二维码的构成\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n* 位置探测图形、位置探测图形分隔符、定位图形：\n\n>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。\n\n* 校正图形\n\n>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。\n\n* 格式信息\n\n> 表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。\n\n* 版本信息\n\n> 即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n* 数据和纠错码字\n\n> 实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。\n\n\n\n## 二维码的生成过程\n\n### 编码过程\n\n#### 编码类型\n\nQR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。\n\n* 数字编码\n\n> 从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。\n\n* 字符编码\n\n> 包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n\n![编码](https://img.carlwe.com/qr_Alphanumeric-mode.png)\n\n![](https://img.carlwe.com/qr_Mode-Indicator.png)\n\n#### 字符编码示例：\n\n* 一、生成数据码\n\n>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n>\n>1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n>2. 两两分组: (10,12) (41,4) (2)\n>3. 把每一组转成11bits的二进制:\n>\n>(10,12) 10x45+12 等于 462 转成 00111001110\n>(41,4) 41x45+4 等于 1849 转成 11100111001\n>(2) 等于 2 转成 000010\n>\n>4. 把这些二进制连接起来：00111001110 11100111001 000010\n>\n>5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n>\n>6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n>\n>7. 添加结束符0000\n>\n>8. 8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000\n>\n>9. 补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。\n>\n>   按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 \n>\n>   上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n* 二、通过数据码生成纠错码\n\n>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n>\n>* **Number of Error Code Correction Blocks** ：需要分多少个块\n>* **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n>\n>![](https://img.carlwe.com/qr_Error-Correction-Blocks.png)\n>\n>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）\n>\n>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n>\n>![](https://img.carlwe.com/qr_jiucuo.png)\n>\n>注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。\n>\n>可参考：https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\n\n* 三、最终编码\n\n>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n>\n>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：\n>\n>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 **11101100 00010001 11101100**\n>\n>Data Codewords如下：\n>\n>| 块 1 | 67   | 85   | 70   | 134  | 87   | 38   | 85   | 194  | 119  | 50   | 6    | 18   | 6    | 103  | 38   |      |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 246  | 246  | 66   | 7    | 118  | 134  | 242  | 7    | 38   | 86   | 22   | 198  | 199  | 146  | 6    |      |\n>| 块 3 | 182  | 230  | 247  | 119  | 50   | 7    | 118  | 134  | 87   | 38   | 82   | 6    | 134  | 151  | 50   | 7    |\n>| 块 4 | 70   | 247  | 118  | 86   | 194  | 6    | 151  | 50   | 16   | 236  | 17   | 236  | 17   | 236  | 17   | 236  |\n>\n>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n>\n>对于纠错码，也是一样：\n>\n>| 块 1 | 213  | 199  | 11   | 45   | 115  | 247  | 241  | 223  | 229  | 248  | 154  | 117  | 154  | 111  | 86   | 161  | 111  | 39   |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 87   | 204  | 96   | 60   | 202  | 182  | 124  | 157  | 200  | 134  | 27   | 129  | 209  | 17   | 163  | 163  | 120  | 133  |\n>| 块 3 | 148  | 116  | 177  | 212  | 76   | 133  | 75   | 242  | 238  | 76   | 195  | 230  | 189  | 10   | 108  | 240  | 192  | 141  |\n>| 块 4 | 235  | 159  | 5    | 173  | 24   | 147  | 59   | 33   | 106  | 40   | 255  | 172  | 82   | 2    | 131  | 32   | 178  | 236  |\n>\n>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n>\n>然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n>\n>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n>\n>这就是我们的数据区。\n\n### 绘制二维码\n\n先看之前这个图\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n#### 添加位置探测图形\n\n> 首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）\n\n![](https://img.carlwe.com/qr_finder.png)\n\n#### 绘制校正图形（ 5*5）\n\n![](https://img.carlwe.com/qr_alignment-pattern.png)\n\n\n\n> 关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）\n\n![](https://img.carlwe.com/qr_Alignment-Position.png)\n\n> 下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![](https://img.carlwe.com/qr_alignment-example.png)\n\n#### 绘制定位图形\n\n> 接下来是定位图形的线。\n\n![](https://img.carlwe.com/qr_Timing-Pattern.png)\n\n> 再接下来是格式信息，下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Format-Information.png)\n\n> 格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）\n\n![](https://img.carlwe.com/qr_Format-Info-bits-postion.png)\n\n>这15个bits中包括：\n>\n>- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n>- 10个纠错bits。主要通过BCH Code来计算\n>\n>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n![](https://img.carlwe.com/qr_Format-Information-Example.png)\n\n> 错误级别：\n\n![](https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png)\n\n#### 添加版本信息\n\n> （版本7以后需要这个编码），下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Version-Information.png)\n\n> 版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例\n\n![](https://img.carlwe.com/qr_Version-Information-Example.png)\n\n> 而其填充位置如下图：\n\n![](https://img.carlwe.com/qr_Version-Information-Position.png)\n\n#### 绘制数据和数据纠错码\n\n> 然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![](https://img.carlwe.com/qr_Data-Placement.png)\n\n#### 转换为掩码图案\n\n>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（**注：选择一个合适的Mask也是有算法的**）\n\n\n\n![](https://img.carlwe.com/qr_masking-pattern.png)\n\n> 其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![](https://img.carlwe.com/qr_Mask-Pattern-Code.png)\n\n> 下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![](https://img.carlwe.com/qr_Masking-Examples.png)\n\n> Mask过后的二维码就成最终的图了。\n\n\n\n## 总结\n\n本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。","slug":"二维码为何长这个样子","published":1,"updated":"2018-12-25T09:19:59.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrlu8oiy000am9a2w7eyk1zv","content":"<p><img src=\"https://img.carlwe.com/qr_main_logo.png\" alt=\"\"></p>\n<blockquote>\n<p>二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。</p>\n<h3 id=\"二维码分类\"><a href=\"#二维码分类\" class=\"headerlink\" title=\"二维码分类\"></a>二维码分类</h3><ul>\n<li><p>堆叠式/行排式二维条码</p>\n<blockquote>\n<p>其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。</p>\n</blockquote>\n</li>\n<li><p>矩阵式二维码</p>\n<blockquote>\n<p>最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_pdf417-qrcode.png\" alt=\"pdf417-qrcode\"></p>\n</li>\n</ul>\n<p>QRCode官网：<a href=\"http://www.qrcode.com\" target=\"_blank\" rel=\"noopener\">www.qrcode.com</a></p>\n<h3 id=\"二维码的特点\"><a href=\"#二维码的特点\" class=\"headerlink\" title=\"二维码的特点\"></a>二维码的特点</h3><ul>\n<li><p>存储大容量信息</p>\n<blockquote>\n<p>传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_performanceImage.png\" alt=\"moredata\"></p>\n</li>\n<li><p>小空间内打印</p>\n<p><img src=\"https://img.carlwe.com/qr_duibi.png\" alt=\"对比\"></p>\n</li>\n<li><p>有效表现各种字母</p>\n<blockquote>\n<p>QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_goodnight.png\" alt=\"o ya su mi na sai\"></p>\n</li>\n<li><p>抗破损能力强</p>\n<blockquote>\n<p>QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_damageImage.png\" alt=\"damageImage\"></p>\n</li>\n<li><p>任意方向识别</p>\n<blockquote>\n<p>QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_symbolImage.png\" alt=\"symbolImage\"></p>\n</li>\n<li><p>支持数据合并功能</p>\n<blockquote>\n<p>QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_commonDataImage.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"二维码的版本与纠错能力\"><a href=\"#二维码的版本与纠错能力\" class=\"headerlink\" title=\"二维码的版本与纠错能力\"></a>二维码的版本与纠错能力</h3><h4 id=\"二维码版本\"><a href=\"#二维码版本\" class=\"headerlink\" title=\"二维码版本\"></a>二维码版本</h4><blockquote>\n<p>二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)<em>4 + 21（V是版本号） 最高Version 40，(40-1)</em>4+21 = 177，所以最高是177 x 177 的正方形。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_versionVarietyImage.png\" alt=\"version\"></p>\n<h4 id=\"二维码纠错能力\"><a href=\"#二维码纠错能力\" class=\"headerlink\" title=\"二维码纠错能力\"></a>二维码纠错能力</h4><blockquote>\n<p>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。<br>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Qrcode_jiucuo.png\" alt=\"\"></p>\n<ul>\n<li>纠错使用RS编码</li>\n</ul>\n<blockquote>\n<p>RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。</p>\n</blockquote>\n<h4 id=\"二维码尺寸选择\"><a href=\"#二维码尺寸选择\" class=\"headerlink\" title=\"二维码尺寸选择\"></a>二维码尺寸选择</h4><blockquote>\n<p>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。</p>\n<p>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。<br>1．假设要输入的数据种类为“数字” 。<br>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”）<br>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_select_version.png\" alt=\"\"></p>\n<h3 id=\"二维码的构成\"><a href=\"#二维码的构成\" class=\"headerlink\" title=\"二维码的构成\"></a>二维码的构成</h3><p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<ul>\n<li>位置探测图形、位置探测图形分隔符、定位图形：</li>\n</ul>\n<blockquote>\n<p>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。</p>\n</blockquote>\n<ul>\n<li>校正图形</li>\n</ul>\n<blockquote>\n<p>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。</p>\n</blockquote>\n<ul>\n<li>格式信息</li>\n</ul>\n<blockquote>\n<p>表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。</p>\n</blockquote>\n<ul>\n<li>版本信息</li>\n</ul>\n<blockquote>\n<p>即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</p>\n</blockquote>\n<ul>\n<li>数据和纠错码字</li>\n</ul>\n<blockquote>\n<p>实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。</p>\n</blockquote>\n<h2 id=\"二维码的生成过程\"><a href=\"#二维码的生成过程\" class=\"headerlink\" title=\"二维码的生成过程\"></a>二维码的生成过程</h2><h3 id=\"编码过程\"><a href=\"#编码过程\" class=\"headerlink\" title=\"编码过程\"></a>编码过程</h3><h4 id=\"编码类型\"><a href=\"#编码类型\" class=\"headerlink\" title=\"编码类型\"></a>编码类型</h4><p>QR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。</p>\n<ul>\n<li>数字编码</li>\n</ul>\n<blockquote>\n<p>从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。</p>\n</blockquote>\n<ul>\n<li>字符编码</li>\n</ul>\n<blockquote>\n<p>包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alphanumeric-mode.png\" alt=\"编码\"></p>\n<p><img src=\"https://img.carlwe.com/qr_Mode-Indicator.png\" alt=\"\"></p>\n<h4 id=\"字符编码示例：\"><a href=\"#字符编码示例：\" class=\"headerlink\" title=\"字符编码示例：\"></a>字符编码示例：</h4><ul>\n<li>一、生成数据码</li>\n</ul>\n<blockquote>\n<p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</li>\n<li>两两分组: (10,12) (41,4) (2)</li>\n<li>把每一组转成11bits的二进制:</li>\n</ol>\n<p>(10,12) 10x45+12 等于 462 转成 00111001110<br>(41,4) 41x45+4 等于 1849 转成 11100111001<br>(2) 等于 2 转成 000010</p>\n<ol start=\"4\">\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n<li><p>添加结束符0000</p>\n</li>\n<li><p>8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000</p>\n</li>\n<li><p>补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。</p>\n<p>按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 </p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>二、通过数据码生成纠错码</li>\n</ul>\n<blockquote>\n<p>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong> ：需要分多少个块</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Blocks.png\" alt=\"\"></p>\n<p>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p><img src=\"https://img.carlwe.com/qr_jiucuo.png\" alt=\"\"></p>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"noopener\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。</p>\n<p>可参考：<a href=\"https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。</a></p>\n</blockquote>\n<ul>\n<li>三、最终编码</li>\n</ul>\n<blockquote>\n<p>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <strong>11101100 00010001 11101100</strong></p>\n<p>Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>67</th>\n<th>85</th>\n<th>70</th>\n<th>134</th>\n<th>87</th>\n<th>38</th>\n<th>85</th>\n<th>194</th>\n<th>119</th>\n<th>50</th>\n<th>6</th>\n<th>18</th>\n<th>6</th>\n<th>103</th>\n<th>38</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：</p>\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>213</th>\n<th>199</th>\n<th>11</th>\n<th>45</th>\n<th>115</th>\n<th>247</th>\n<th>241</th>\n<th>223</th>\n<th>229</th>\n<th>248</th>\n<th>154</th>\n<th>117</th>\n<th>154</th>\n<th>111</th>\n<th>86</th>\n<th>161</th>\n<th>111</th>\n<th>39</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>87</td>\n<td>204</td>\n<td>96</td>\n<td>60</td>\n<td>202</td>\n<td>182</td>\n<td>124</td>\n<td>157</td>\n<td>200</td>\n<td>134</td>\n<td>27</td>\n<td>129</td>\n<td>209</td>\n<td>17</td>\n<td>163</td>\n<td>163</td>\n<td>120</td>\n<td>133</td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>148</td>\n<td>116</td>\n<td>177</td>\n<td>212</td>\n<td>76</td>\n<td>133</td>\n<td>75</td>\n<td>242</td>\n<td>238</td>\n<td>76</td>\n<td>195</td>\n<td>230</td>\n<td>189</td>\n<td>10</td>\n<td>108</td>\n<td>240</td>\n<td>192</td>\n<td>141</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>235</td>\n<td>159</td>\n<td>5</td>\n<td>173</td>\n<td>24</td>\n<td>147</td>\n<td>59</td>\n<td>33</td>\n<td>106</td>\n<td>40</td>\n<td>255</td>\n<td>172</td>\n<td>82</td>\n<td>2</td>\n<td>131</td>\n<td>32</td>\n<td>178</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n</blockquote>\n<h3 id=\"绘制二维码\"><a href=\"#绘制二维码\" class=\"headerlink\" title=\"绘制二维码\"></a>绘制二维码</h3><p>先看之前这个图</p>\n<p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<h4 id=\"添加位置探测图形\"><a href=\"#添加位置探测图形\" class=\"headerlink\" title=\"添加位置探测图形\"></a>添加位置探测图形</h4><blockquote>\n<p>首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_finder.png\" alt=\"\"></p>\n<h4 id=\"绘制校正图形（-5-5）\"><a href=\"#绘制校正图形（-5-5）\" class=\"headerlink\" title=\"绘制校正图形（ 5*5）\"></a>绘制校正图形（ 5*5）</h4><p><img src=\"https://img.carlwe.com/qr_alignment-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alignment-Position.png\" alt=\"\"></p>\n<blockquote>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_alignment-example.png\" alt=\"\"></p>\n<h4 id=\"绘制定位图形\"><a href=\"#绘制定位图形\" class=\"headerlink\" title=\"绘制定位图形\"></a>绘制定位图形</h4><blockquote>\n<p>接下来是定位图形的线。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Timing-Pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>再接下来是格式信息，下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Info-bits-postion.png\" alt=\"\"></p>\n<blockquote>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>错误级别：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png\" alt=\"\"></p>\n<h4 id=\"添加版本信息\"><a href=\"#添加版本信息\" class=\"headerlink\" title=\"添加版本信息\"></a>添加版本信息</h4><blockquote>\n<p>（版本7以后需要这个编码），下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>而其填充位置如下图：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Position.png\" alt=\"\"></p>\n<h4 id=\"绘制数据和数据纠错码\"><a href=\"#绘制数据和数据纠错码\" class=\"headerlink\" title=\"绘制数据和数据纠错码\"></a>绘制数据和数据纠错码</h4><blockquote>\n<p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Data-Placement.png\" alt=\"\"></p>\n<h4 id=\"转换为掩码图案\"><a href=\"#转换为掩码图案\" class=\"headerlink\" title=\"转换为掩码图案\"></a>转换为掩码图案</h4><blockquote>\n<p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（<strong>注：选择一个合适的Mask也是有算法的</strong>）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_masking-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Mask-Pattern-Code.png\" alt=\"\"></p>\n<blockquote>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Masking-Examples.png\" alt=\"\"></p>\n<blockquote>\n<p>Mask过后的二维码就成最终的图了。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/qr_main_logo.png\" alt=\"\"></p>\n<blockquote>\n<p>二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。</p>\n</blockquote>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。</p>\n<h3 id=\"二维码分类\"><a href=\"#二维码分类\" class=\"headerlink\" title=\"二维码分类\"></a>二维码分类</h3><ul>\n<li><p>堆叠式/行排式二维条码</p>\n<blockquote>\n<p>其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。</p>\n</blockquote>\n</li>\n<li><p>矩阵式二维码</p>\n<blockquote>\n<p>最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_pdf417-qrcode.png\" alt=\"pdf417-qrcode\"></p>\n</li>\n</ul>\n<p>QRCode官网：<a href=\"http://www.qrcode.com\" target=\"_blank\" rel=\"noopener\">www.qrcode.com</a></p>\n<h3 id=\"二维码的特点\"><a href=\"#二维码的特点\" class=\"headerlink\" title=\"二维码的特点\"></a>二维码的特点</h3><ul>\n<li><p>存储大容量信息</p>\n<blockquote>\n<p>传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_performanceImage.png\" alt=\"moredata\"></p>\n</li>\n<li><p>小空间内打印</p>\n<p><img src=\"https://img.carlwe.com/qr_duibi.png\" alt=\"对比\"></p>\n</li>\n<li><p>有效表现各种字母</p>\n<blockquote>\n<p>QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_goodnight.png\" alt=\"o ya su mi na sai\"></p>\n</li>\n<li><p>抗破损能力强</p>\n<blockquote>\n<p>QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_damageImage.png\" alt=\"damageImage\"></p>\n</li>\n<li><p>任意方向识别</p>\n<blockquote>\n<p>QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_symbolImage.png\" alt=\"symbolImage\"></p>\n</li>\n<li><p>支持数据合并功能</p>\n<blockquote>\n<p>QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_commonDataImage.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"二维码的版本与纠错能力\"><a href=\"#二维码的版本与纠错能力\" class=\"headerlink\" title=\"二维码的版本与纠错能力\"></a>二维码的版本与纠错能力</h3><h4 id=\"二维码版本\"><a href=\"#二维码版本\" class=\"headerlink\" title=\"二维码版本\"></a>二维码版本</h4><blockquote>\n<p>二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)<em>4 + 21（V是版本号） 最高Version 40，(40-1)</em>4+21 = 177，所以最高是177 x 177 的正方形。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_versionVarietyImage.png\" alt=\"version\"></p>\n<h4 id=\"二维码纠错能力\"><a href=\"#二维码纠错能力\" class=\"headerlink\" title=\"二维码纠错能力\"></a>二维码纠错能力</h4><blockquote>\n<p>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。<br>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Qrcode_jiucuo.png\" alt=\"\"></p>\n<ul>\n<li>纠错使用RS编码</li>\n</ul>\n<blockquote>\n<p>RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。</p>\n</blockquote>\n<h4 id=\"二维码尺寸选择\"><a href=\"#二维码尺寸选择\" class=\"headerlink\" title=\"二维码尺寸选择\"></a>二维码尺寸选择</h4><blockquote>\n<p>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。</p>\n<p>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。<br>1．假设要输入的数据种类为“数字” 。<br>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”）<br>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_select_version.png\" alt=\"\"></p>\n<h3 id=\"二维码的构成\"><a href=\"#二维码的构成\" class=\"headerlink\" title=\"二维码的构成\"></a>二维码的构成</h3><p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<ul>\n<li>位置探测图形、位置探测图形分隔符、定位图形：</li>\n</ul>\n<blockquote>\n<p>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。</p>\n</blockquote>\n<ul>\n<li>校正图形</li>\n</ul>\n<blockquote>\n<p>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。</p>\n</blockquote>\n<ul>\n<li>格式信息</li>\n</ul>\n<blockquote>\n<p>表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。</p>\n</blockquote>\n<ul>\n<li>版本信息</li>\n</ul>\n<blockquote>\n<p>即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</p>\n</blockquote>\n<ul>\n<li>数据和纠错码字</li>\n</ul>\n<blockquote>\n<p>实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。</p>\n</blockquote>\n<h2 id=\"二维码的生成过程\"><a href=\"#二维码的生成过程\" class=\"headerlink\" title=\"二维码的生成过程\"></a>二维码的生成过程</h2><h3 id=\"编码过程\"><a href=\"#编码过程\" class=\"headerlink\" title=\"编码过程\"></a>编码过程</h3><h4 id=\"编码类型\"><a href=\"#编码类型\" class=\"headerlink\" title=\"编码类型\"></a>编码类型</h4><p>QR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。</p>\n<ul>\n<li>数字编码</li>\n</ul>\n<blockquote>\n<p>从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。</p>\n</blockquote>\n<ul>\n<li>字符编码</li>\n</ul>\n<blockquote>\n<p>包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alphanumeric-mode.png\" alt=\"编码\"></p>\n<p><img src=\"https://img.carlwe.com/qr_Mode-Indicator.png\" alt=\"\"></p>\n<h4 id=\"字符编码示例：\"><a href=\"#字符编码示例：\" class=\"headerlink\" title=\"字符编码示例：\"></a>字符编码示例：</h4><ul>\n<li>一、生成数据码</li>\n</ul>\n<blockquote>\n<p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</li>\n<li>两两分组: (10,12) (41,4) (2)</li>\n<li>把每一组转成11bits的二进制:</li>\n</ol>\n<p>(10,12) 10x45+12 等于 462 转成 00111001110<br>(41,4) 41x45+4 等于 1849 转成 11100111001<br>(2) 等于 2 转成 000010</p>\n<ol start=\"4\">\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n<li><p>添加结束符0000</p>\n</li>\n<li><p>8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000</p>\n</li>\n<li><p>补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。</p>\n<p>按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 </p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>二、通过数据码生成纠错码</li>\n</ul>\n<blockquote>\n<p>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong> ：需要分多少个块</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Blocks.png\" alt=\"\"></p>\n<p>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p><img src=\"https://img.carlwe.com/qr_jiucuo.png\" alt=\"\"></p>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"noopener\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。</p>\n<p>可参考：<a href=\"https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。</a></p>\n</blockquote>\n<ul>\n<li>三、最终编码</li>\n</ul>\n<blockquote>\n<p>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <strong>11101100 00010001 11101100</strong></p>\n<p>Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>67</th>\n<th>85</th>\n<th>70</th>\n<th>134</th>\n<th>87</th>\n<th>38</th>\n<th>85</th>\n<th>194</th>\n<th>119</th>\n<th>50</th>\n<th>6</th>\n<th>18</th>\n<th>6</th>\n<th>103</th>\n<th>38</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：</p>\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>213</th>\n<th>199</th>\n<th>11</th>\n<th>45</th>\n<th>115</th>\n<th>247</th>\n<th>241</th>\n<th>223</th>\n<th>229</th>\n<th>248</th>\n<th>154</th>\n<th>117</th>\n<th>154</th>\n<th>111</th>\n<th>86</th>\n<th>161</th>\n<th>111</th>\n<th>39</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>87</td>\n<td>204</td>\n<td>96</td>\n<td>60</td>\n<td>202</td>\n<td>182</td>\n<td>124</td>\n<td>157</td>\n<td>200</td>\n<td>134</td>\n<td>27</td>\n<td>129</td>\n<td>209</td>\n<td>17</td>\n<td>163</td>\n<td>163</td>\n<td>120</td>\n<td>133</td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>148</td>\n<td>116</td>\n<td>177</td>\n<td>212</td>\n<td>76</td>\n<td>133</td>\n<td>75</td>\n<td>242</td>\n<td>238</td>\n<td>76</td>\n<td>195</td>\n<td>230</td>\n<td>189</td>\n<td>10</td>\n<td>108</td>\n<td>240</td>\n<td>192</td>\n<td>141</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>235</td>\n<td>159</td>\n<td>5</td>\n<td>173</td>\n<td>24</td>\n<td>147</td>\n<td>59</td>\n<td>33</td>\n<td>106</td>\n<td>40</td>\n<td>255</td>\n<td>172</td>\n<td>82</td>\n<td>2</td>\n<td>131</td>\n<td>32</td>\n<td>178</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n</blockquote>\n<h3 id=\"绘制二维码\"><a href=\"#绘制二维码\" class=\"headerlink\" title=\"绘制二维码\"></a>绘制二维码</h3><p>先看之前这个图</p>\n<p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<h4 id=\"添加位置探测图形\"><a href=\"#添加位置探测图形\" class=\"headerlink\" title=\"添加位置探测图形\"></a>添加位置探测图形</h4><blockquote>\n<p>首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_finder.png\" alt=\"\"></p>\n<h4 id=\"绘制校正图形（-5-5）\"><a href=\"#绘制校正图形（-5-5）\" class=\"headerlink\" title=\"绘制校正图形（ 5*5）\"></a>绘制校正图形（ 5*5）</h4><p><img src=\"https://img.carlwe.com/qr_alignment-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alignment-Position.png\" alt=\"\"></p>\n<blockquote>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_alignment-example.png\" alt=\"\"></p>\n<h4 id=\"绘制定位图形\"><a href=\"#绘制定位图形\" class=\"headerlink\" title=\"绘制定位图形\"></a>绘制定位图形</h4><blockquote>\n<p>接下来是定位图形的线。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Timing-Pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>再接下来是格式信息，下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Info-bits-postion.png\" alt=\"\"></p>\n<blockquote>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>错误级别：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png\" alt=\"\"></p>\n<h4 id=\"添加版本信息\"><a href=\"#添加版本信息\" class=\"headerlink\" title=\"添加版本信息\"></a>添加版本信息</h4><blockquote>\n<p>（版本7以后需要这个编码），下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>而其填充位置如下图：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Position.png\" alt=\"\"></p>\n<h4 id=\"绘制数据和数据纠错码\"><a href=\"#绘制数据和数据纠错码\" class=\"headerlink\" title=\"绘制数据和数据纠错码\"></a>绘制数据和数据纠错码</h4><blockquote>\n<p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Data-Placement.png\" alt=\"\"></p>\n<h4 id=\"转换为掩码图案\"><a href=\"#转换为掩码图案\" class=\"headerlink\" title=\"转换为掩码图案\"></a>转换为掩码图案</h4><blockquote>\n<p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（<strong>注：选择一个合适的Mask也是有算法的</strong>）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_masking-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Mask-Pattern-Code.png\" alt=\"\"></p>\n<blockquote>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Masking-Examples.png\" alt=\"\"></p>\n<blockquote>\n<p>Mask过后的二维码就成最终的图了。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。</p>"},{"title":"浅谈Android内存优化","date":"2019-01-11T08:39:04.000Z","_content":"\n![](https://img.carlwe.com/android_memory_logo.png)\n\n今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁\n<!--more-->\n\n>这篇文章主要通过如下三个方面对Android内存优化进行介绍：\n>\n>1. Android内存分配与回收机制\n>2. Android常用的内存优化方法\n>3. Android内存分析与监控\n\n文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考[极客时间](https://time.geekbang.org/column/article/71277)张绍文老师的Android开发高手课。\n\n## 一、Android内存分配与回收机制\n\n想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。\n\n### Application Framework\n\n首先来看下进程的优先级：\n\n![](https://img.carlwe.com/process_priority.jpg)\n\n`前台进程`：用户当前操作所必需的进程。\n\n`可见进程`：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。\n\n`服务进程`：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）\n\n`后台进程`：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）\n\n`空进程`：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间\n\n`进程生命周期`：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。\n\n`最后我们需要知道`：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。\n\n### Dalvik/Art 虚拟机\n\n#### Android Dalvik Heap\n\n![](https://img.carlwe.com/dalvik_art_gc.jpeg)\n\n`简介`：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。\n\n`对象分配过程`：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。\n\n`问题`：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。\n\n#### Dalvik虚拟机执行模式\n\n![](https://img.carlwe.com/dalvik_gc.jpg)\n\n`Dalvik垃圾回收过程`：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。\n\n`大内存对象分配`：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。\n\n`总结`：Dalvik虚拟机的三个问题\n\n1. GC时挂起所有线程 \n2. 大而连续的空间紧张 \n3. 内存碎片化严重\n\n#### ART虚拟机的优化\n\n![](https://img.carlwe.com/art_gc.jpg)\n\n`GC过程`：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。\n\n`大内存对象分配`：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.\n\n`内存碎片化`在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。\n\n`总结` ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。\n\n### Linux内核\n\n![](https://img.carlwe.com/linux_kernel.jpg)\n\n`Lowmemorykiller`：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。\n\n`Oom_killer` ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。\n\n`Oom的条件`：只要allocated + 新分配的内存 >= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）\n\n### 内存不优化会导致哪些问题？\n\n![](https://img.carlwe.com/memory_problem.jpg)\n\n上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。\n\n`内存抖动`：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。\n\n## 二、Android常用的内存优化方法\n\n在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：\n\n>1. 降低运行时内存\n>2. 代码优化\n>3. 内存泄漏优化\n\n在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。\n\n### 降低运行时内存\n\n![](https://img.carlwe.com/reduce_running_memory.jpg)\n\n降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：\n\n* 减小APK体积\n\n>1. 去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。\n>2. 尽量复用资源，其实这是一种比较好的编码习惯。\n>3. 对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。\n\n* Bitmap优化\n\n>1. 统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。\n>2. 图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。\n>3. inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。\n>4. 选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。\n>5. inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。\n\n参考：\n\nAndroid 官网文档[Managing Bitmap Memory](https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn)、[Handling bitmaps](https://developer.android.com/topic/performance/graphics/?hl=zh-cn)\n\n### 代码优化\n\n这里介绍一些好的编码习惯：\n\n![](https://img.carlwe.com/code_optimize.jpg)\n\n1. 考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考[Android性能优化典范](http://hukai.me/android-performance-patterns-season-3/)\n\n2. 在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。\n\n3. SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)\n\n   > `SoftReference`：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n   >\n   > `WeakReference`：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 \n   >\n   > `PhantomReference`：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    \n\n4. 谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用`largeheap=true`声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。\n\n5. 谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。\n\n6. 考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。\n\n### 内存泄漏优化\n\n内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：\n\n![](https://img.carlwe.com/memory_leak_optimize.jpg)\n\n1. Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。\n\n2. 除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。\n\n3. 大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。\n\n4. webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())\n\n5. 虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。\n\n6. 我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。\n\n7. 谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。\n\n`总结`：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。\n\n### 做好上面说的1、2、3就够了吗？\n\n![](https://img.carlwe.com/memory_is_enough.jpg)\n\n前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？\n\n我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！\n\n## 三、Android内存分析与监控\n\nAndroid内存分析和监控主要介绍如下四种方式：\n\n>1. 查看GC日志\n>2. 查看内存使用情况\n>3. 通过LeakCanary监控内存 泄漏\n>4. 线上监控\n\n### 查看GC日志\n\n#### GC的类型：\n\n![](https://img.carlwe.com/gc_type.jpg)\n\n`Concurrent`： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。\n\n`Alloc`： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。\n\n`Explicit`：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）\n\n`NativeAlloc`：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。\n\n#### 查看垃圾回收日志\n\n![](https://img.carlwe.com/gc_log.jpg)\n\n在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：\n\n> `垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间`\n>\n> `LOS objects`是前面所说到的Art虚拟机新增的\n>\n> 着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧\n\n### 查看内存使用情况\n\n通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：\n\n>1. adb shell\n>2. Profiler\n\n#### 查看内存使用情况\n\n![](https://img.carlwe.com/adb_dumpsys.jpg)\n\n详细的使用请参考AndroidDeveloper[调查RAM使用情况]( https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn)\n\n#### 使用Profiler分析内存\n\nAndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。\n\n![](https://img.carlwe.com/use_profiler.jpg)\n\n如何通过Profiler进行内存的分析，如何找到内存泄漏请查看\n\n[使用 Memory Profiler 查看 Java 堆和内存分配](https://developer.android.com/studio/profile/memory-profiler)\n\n这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。\n\n### 使用LeakCanary监控内存泄漏\n\n![](https://img.carlwe.com/leakcanary_logo.png)\n\n`LeakCanary名字的由来`：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。\n\n`原理`：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。\n\n`LeakCanary的问题 `：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。\n\n详细查看 [Github](https://github.com/square/leakcanary)\n\n### 线上监控\n\n线上的内存监控一般都是一些大公司在做，例如美团的[Probe](https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf)还有微信最近开源的[Matrix](https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA)，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。","source":"_posts/浅谈Android内存优化.md","raw":"---\ntitle: 浅谈Android内存优化\ndate: 2019-01-11 16:39:04\ntags: 技术\n---\n\n![](https://img.carlwe.com/android_memory_logo.png)\n\n今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁\n<!--more-->\n\n>这篇文章主要通过如下三个方面对Android内存优化进行介绍：\n>\n>1. Android内存分配与回收机制\n>2. Android常用的内存优化方法\n>3. Android内存分析与监控\n\n文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考[极客时间](https://time.geekbang.org/column/article/71277)张绍文老师的Android开发高手课。\n\n## 一、Android内存分配与回收机制\n\n想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。\n\n### Application Framework\n\n首先来看下进程的优先级：\n\n![](https://img.carlwe.com/process_priority.jpg)\n\n`前台进程`：用户当前操作所必需的进程。\n\n`可见进程`：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。\n\n`服务进程`：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）\n\n`后台进程`：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）\n\n`空进程`：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间\n\n`进程生命周期`：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。\n\n`最后我们需要知道`：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。\n\n### Dalvik/Art 虚拟机\n\n#### Android Dalvik Heap\n\n![](https://img.carlwe.com/dalvik_art_gc.jpeg)\n\n`简介`：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。\n\n`对象分配过程`：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。\n\n`问题`：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。\n\n#### Dalvik虚拟机执行模式\n\n![](https://img.carlwe.com/dalvik_gc.jpg)\n\n`Dalvik垃圾回收过程`：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。\n\n`大内存对象分配`：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。\n\n`总结`：Dalvik虚拟机的三个问题\n\n1. GC时挂起所有线程 \n2. 大而连续的空间紧张 \n3. 内存碎片化严重\n\n#### ART虚拟机的优化\n\n![](https://img.carlwe.com/art_gc.jpg)\n\n`GC过程`：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。\n\n`大内存对象分配`：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.\n\n`内存碎片化`在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。\n\n`总结` ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。\n\n### Linux内核\n\n![](https://img.carlwe.com/linux_kernel.jpg)\n\n`Lowmemorykiller`：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。\n\n`Oom_killer` ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。\n\n`Oom的条件`：只要allocated + 新分配的内存 >= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）\n\n### 内存不优化会导致哪些问题？\n\n![](https://img.carlwe.com/memory_problem.jpg)\n\n上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。\n\n`内存抖动`：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。\n\n## 二、Android常用的内存优化方法\n\n在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：\n\n>1. 降低运行时内存\n>2. 代码优化\n>3. 内存泄漏优化\n\n在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。\n\n### 降低运行时内存\n\n![](https://img.carlwe.com/reduce_running_memory.jpg)\n\n降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：\n\n* 减小APK体积\n\n>1. 去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。\n>2. 尽量复用资源，其实这是一种比较好的编码习惯。\n>3. 对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。\n\n* Bitmap优化\n\n>1. 统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。\n>2. 图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。\n>3. inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。\n>4. 选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。\n>5. inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。\n\n参考：\n\nAndroid 官网文档[Managing Bitmap Memory](https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn)、[Handling bitmaps](https://developer.android.com/topic/performance/graphics/?hl=zh-cn)\n\n### 代码优化\n\n这里介绍一些好的编码习惯：\n\n![](https://img.carlwe.com/code_optimize.jpg)\n\n1. 考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考[Android性能优化典范](http://hukai.me/android-performance-patterns-season-3/)\n\n2. 在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。\n\n3. SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)\n\n   > `SoftReference`：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n   >\n   > `WeakReference`：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 \n   >\n   > `PhantomReference`：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    \n\n4. 谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用`largeheap=true`声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。\n\n5. 谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。\n\n6. 考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。\n\n### 内存泄漏优化\n\n内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：\n\n![](https://img.carlwe.com/memory_leak_optimize.jpg)\n\n1. Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。\n\n2. 除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。\n\n3. 大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。\n\n4. webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())\n\n5. 虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。\n\n6. 我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。\n\n7. 谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。\n\n`总结`：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。\n\n### 做好上面说的1、2、3就够了吗？\n\n![](https://img.carlwe.com/memory_is_enough.jpg)\n\n前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？\n\n我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！\n\n## 三、Android内存分析与监控\n\nAndroid内存分析和监控主要介绍如下四种方式：\n\n>1. 查看GC日志\n>2. 查看内存使用情况\n>3. 通过LeakCanary监控内存 泄漏\n>4. 线上监控\n\n### 查看GC日志\n\n#### GC的类型：\n\n![](https://img.carlwe.com/gc_type.jpg)\n\n`Concurrent`： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。\n\n`Alloc`： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。\n\n`Explicit`：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）\n\n`NativeAlloc`：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。\n\n#### 查看垃圾回收日志\n\n![](https://img.carlwe.com/gc_log.jpg)\n\n在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：\n\n> `垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间`\n>\n> `LOS objects`是前面所说到的Art虚拟机新增的\n>\n> 着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧\n\n### 查看内存使用情况\n\n通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：\n\n>1. adb shell\n>2. Profiler\n\n#### 查看内存使用情况\n\n![](https://img.carlwe.com/adb_dumpsys.jpg)\n\n详细的使用请参考AndroidDeveloper[调查RAM使用情况]( https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn)\n\n#### 使用Profiler分析内存\n\nAndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。\n\n![](https://img.carlwe.com/use_profiler.jpg)\n\n如何通过Profiler进行内存的分析，如何找到内存泄漏请查看\n\n[使用 Memory Profiler 查看 Java 堆和内存分配](https://developer.android.com/studio/profile/memory-profiler)\n\n这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。\n\n### 使用LeakCanary监控内存泄漏\n\n![](https://img.carlwe.com/leakcanary_logo.png)\n\n`LeakCanary名字的由来`：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。\n\n`原理`：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。\n\n`LeakCanary的问题 `：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。\n\n详细查看 [Github](https://github.com/square/leakcanary)\n\n### 线上监控\n\n线上的内存监控一般都是一些大公司在做，例如美团的[Probe](https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf)还有微信最近开源的[Matrix](https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA)，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。","slug":"浅谈Android内存优化","published":1,"updated":"2019-02-01T09:18:54.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrlu8oiz000bm9a2ga46rom3","content":"<p><img src=\"https://img.carlwe.com/android_memory_logo.png\" alt=\"\"></p>\n<p>今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁<br><a id=\"more\"></a></p>\n<blockquote>\n<p>这篇文章主要通过如下三个方面对Android内存优化进行介绍：</p>\n<ol>\n<li>Android内存分配与回收机制</li>\n<li>Android常用的内存优化方法</li>\n<li>Android内存分析与监控</li>\n</ol>\n</blockquote>\n<p>文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考<a href=\"https://time.geekbang.org/column/article/71277\" target=\"_blank\" rel=\"noopener\">极客时间</a>张绍文老师的Android开发高手课。</p>\n<h2 id=\"一、Android内存分配与回收机制\"><a href=\"#一、Android内存分配与回收机制\" class=\"headerlink\" title=\"一、Android内存分配与回收机制\"></a>一、Android内存分配与回收机制</h2><p>想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。</p>\n<h3 id=\"Application-Framework\"><a href=\"#Application-Framework\" class=\"headerlink\" title=\"Application Framework\"></a>Application Framework</h3><p>首先来看下进程的优先级：</p>\n<p><img src=\"https://img.carlwe.com/process_priority.jpg\" alt=\"\"></p>\n<p><code>前台进程</code>：用户当前操作所必需的进程。</p>\n<p><code>可见进程</code>：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。</p>\n<p><code>服务进程</code>：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）</p>\n<p><code>后台进程</code>：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）</p>\n<p><code>空进程</code>：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间</p>\n<p><code>进程生命周期</code>：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。</p>\n<p><code>最后我们需要知道</code>：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。</p>\n<h3 id=\"Dalvik-Art-虚拟机\"><a href=\"#Dalvik-Art-虚拟机\" class=\"headerlink\" title=\"Dalvik/Art 虚拟机\"></a>Dalvik/Art 虚拟机</h3><h4 id=\"Android-Dalvik-Heap\"><a href=\"#Android-Dalvik-Heap\" class=\"headerlink\" title=\"Android Dalvik Heap\"></a>Android Dalvik Heap</h4><p><img src=\"https://img.carlwe.com/dalvik_art_gc.jpeg\" alt=\"\"></p>\n<p><code>简介</code>：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。</p>\n<p><code>对象分配过程</code>：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。</p>\n<p><code>问题</code>：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。</p>\n<h4 id=\"Dalvik虚拟机执行模式\"><a href=\"#Dalvik虚拟机执行模式\" class=\"headerlink\" title=\"Dalvik虚拟机执行模式\"></a>Dalvik虚拟机执行模式</h4><p><img src=\"https://img.carlwe.com/dalvik_gc.jpg\" alt=\"\"></p>\n<p><code>Dalvik垃圾回收过程</code>：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。</p>\n<p><code>大内存对象分配</code>：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。</p>\n<p><code>总结</code>：Dalvik虚拟机的三个问题</p>\n<ol>\n<li>GC时挂起所有线程 </li>\n<li>大而连续的空间紧张 </li>\n<li>内存碎片化严重</li>\n</ol>\n<h4 id=\"ART虚拟机的优化\"><a href=\"#ART虚拟机的优化\" class=\"headerlink\" title=\"ART虚拟机的优化\"></a>ART虚拟机的优化</h4><p><img src=\"https://img.carlwe.com/art_gc.jpg\" alt=\"\"></p>\n<p><code>GC过程</code>：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。</p>\n<p><code>大内存对象分配</code>：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.</p>\n<p><code>内存碎片化</code>在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。</p>\n<p><code>总结</code> ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。</p>\n<h3 id=\"Linux内核\"><a href=\"#Linux内核\" class=\"headerlink\" title=\"Linux内核\"></a>Linux内核</h3><p><img src=\"https://img.carlwe.com/linux_kernel.jpg\" alt=\"\"></p>\n<p><code>Lowmemorykiller</code>：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。</p>\n<p><code>Oom_killer</code> ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。</p>\n<p><code>Oom的条件</code>：只要allocated + 新分配的内存 &gt;= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）</p>\n<h3 id=\"内存不优化会导致哪些问题？\"><a href=\"#内存不优化会导致哪些问题？\" class=\"headerlink\" title=\"内存不优化会导致哪些问题？\"></a>内存不优化会导致哪些问题？</h3><p><img src=\"https://img.carlwe.com/memory_problem.jpg\" alt=\"\"></p>\n<p>上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。</p>\n<p><code>内存抖动</code>：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p>\n<h2 id=\"二、Android常用的内存优化方法\"><a href=\"#二、Android常用的内存优化方法\" class=\"headerlink\" title=\"二、Android常用的内存优化方法\"></a>二、Android常用的内存优化方法</h2><p>在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：</p>\n<blockquote>\n<ol>\n<li>降低运行时内存</li>\n<li>代码优化</li>\n<li>内存泄漏优化</li>\n</ol>\n</blockquote>\n<p>在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。</p>\n<h3 id=\"降低运行时内存\"><a href=\"#降低运行时内存\" class=\"headerlink\" title=\"降低运行时内存\"></a>降低运行时内存</h3><p><img src=\"https://img.carlwe.com/reduce_running_memory.jpg\" alt=\"\"></p>\n<p>降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：</p>\n<ul>\n<li>减小APK体积</li>\n</ul>\n<blockquote>\n<ol>\n<li>去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。</li>\n<li>尽量复用资源，其实这是一种比较好的编码习惯。</li>\n<li>对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。</li>\n</ol>\n</blockquote>\n<ul>\n<li>Bitmap优化</li>\n</ul>\n<blockquote>\n<ol>\n<li>统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。</li>\n<li>图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。</li>\n<li>inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。</li>\n<li>选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</li>\n<li>inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。</li>\n</ol>\n</blockquote>\n<p>参考：</p>\n<p>Android 官网文档<a href=\"https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Managing Bitmap Memory</a>、<a href=\"https://developer.android.com/topic/performance/graphics/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Handling bitmaps</a></p>\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>这里介绍一些好的编码习惯：</p>\n<p><img src=\"https://img.carlwe.com/code_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考<a href=\"http://hukai.me/android-performance-patterns-season-3/\" target=\"_blank\" rel=\"noopener\">Android性能优化典范</a></p>\n</li>\n<li><p>在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。</p>\n</li>\n<li><p>SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)</p>\n<blockquote>\n<p><code>SoftReference</code>：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n<p><code>WeakReference</code>：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 </p>\n<p><code>PhantomReference</code>：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    </p>\n</blockquote>\n</li>\n<li><p>谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用<code>largeheap=true</code>声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。</p>\n</li>\n<li><p>谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。</p>\n</li>\n<li><p>考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。</p>\n</li>\n</ol>\n<h3 id=\"内存泄漏优化\"><a href=\"#内存泄漏优化\" class=\"headerlink\" title=\"内存泄漏优化\"></a>内存泄漏优化</h3><p>内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：</p>\n<p><img src=\"https://img.carlwe.com/memory_leak_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。</p>\n</li>\n<li><p>除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。</p>\n</li>\n<li><p>大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。</p>\n</li>\n<li><p>webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())</p>\n</li>\n<li><p>虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。</p>\n</li>\n<li><p>我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。</p>\n</li>\n<li><p>谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。</p>\n</li>\n</ol>\n<p><code>总结</code>：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。</p>\n<h3 id=\"做好上面说的1、2、3就够了吗？\"><a href=\"#做好上面说的1、2、3就够了吗？\" class=\"headerlink\" title=\"做好上面说的1、2、3就够了吗？\"></a>做好上面说的1、2、3就够了吗？</h3><p><img src=\"https://img.carlwe.com/memory_is_enough.jpg\" alt=\"\"></p>\n<p>前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？</p>\n<p>我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！</p>\n<h2 id=\"三、Android内存分析与监控\"><a href=\"#三、Android内存分析与监控\" class=\"headerlink\" title=\"三、Android内存分析与监控\"></a>三、Android内存分析与监控</h2><p>Android内存分析和监控主要介绍如下四种方式：</p>\n<blockquote>\n<ol>\n<li>查看GC日志</li>\n<li>查看内存使用情况</li>\n<li>通过LeakCanary监控内存 泄漏</li>\n<li>线上监控</li>\n</ol>\n</blockquote>\n<h3 id=\"查看GC日志\"><a href=\"#查看GC日志\" class=\"headerlink\" title=\"查看GC日志\"></a>查看GC日志</h3><h4 id=\"GC的类型：\"><a href=\"#GC的类型：\" class=\"headerlink\" title=\"GC的类型：\"></a>GC的类型：</h4><p><img src=\"https://img.carlwe.com/gc_type.jpg\" alt=\"\"></p>\n<p><code>Concurrent</code>： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。</p>\n<p><code>Alloc</code>： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。</p>\n<p><code>Explicit</code>：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）</p>\n<p><code>NativeAlloc</code>：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。</p>\n<h4 id=\"查看垃圾回收日志\"><a href=\"#查看垃圾回收日志\" class=\"headerlink\" title=\"查看垃圾回收日志\"></a>查看垃圾回收日志</h4><p><img src=\"https://img.carlwe.com/gc_log.jpg\" alt=\"\"></p>\n<p>在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：</p>\n<blockquote>\n<p><code>垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间</code></p>\n<p><code>LOS objects</code>是前面所说到的Art虚拟机新增的</p>\n<p>着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧</p>\n</blockquote>\n<h3 id=\"查看内存使用情况\"><a href=\"#查看内存使用情况\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h3><p>通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：</p>\n<blockquote>\n<ol>\n<li>adb shell</li>\n<li>Profiler</li>\n</ol>\n</blockquote>\n<h4 id=\"查看内存使用情况-1\"><a href=\"#查看内存使用情况-1\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h4><p><img src=\"https://img.carlwe.com/adb_dumpsys.jpg\" alt=\"\"></p>\n<p>详细的使用请参考AndroidDeveloper<a href=\"https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">调查RAM使用情况</a></p>\n<h4 id=\"使用Profiler分析内存\"><a href=\"#使用Profiler分析内存\" class=\"headerlink\" title=\"使用Profiler分析内存\"></a>使用Profiler分析内存</h4><p>AndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。</p>\n<p><img src=\"https://img.carlwe.com/use_profiler.jpg\" alt=\"\"></p>\n<p>如何通过Profiler进行内存的分析，如何找到内存泄漏请查看</p>\n<p><a href=\"https://developer.android.com/studio/profile/memory-profiler\" target=\"_blank\" rel=\"noopener\">使用 Memory Profiler 查看 Java 堆和内存分配</a></p>\n<p>这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。</p>\n<h3 id=\"使用LeakCanary监控内存泄漏\"><a href=\"#使用LeakCanary监控内存泄漏\" class=\"headerlink\" title=\"使用LeakCanary监控内存泄漏\"></a>使用LeakCanary监控内存泄漏</h3><p><img src=\"https://img.carlwe.com/leakcanary_logo.png\" alt=\"\"></p>\n<p><code>LeakCanary名字的由来</code>：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。</p>\n<p><code>原理</code>：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。</p>\n<p><code>LeakCanary的问题</code>：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。</p>\n<p>详细查看 <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"线上监控\"><a href=\"#线上监控\" class=\"headerlink\" title=\"线上监控\"></a>线上监控</h3><p>线上的内存监控一般都是一些大公司在做，例如美团的<a href=\"https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf\" target=\"_blank\" rel=\"noopener\">Probe</a>还有微信最近开源的<a href=\"https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA\" target=\"_blank\" rel=\"noopener\">Matrix</a>，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/android_memory_logo.png\" alt=\"\"></p>\n<p>今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁<br>","more":"</p>\n<blockquote>\n<p>这篇文章主要通过如下三个方面对Android内存优化进行介绍：</p>\n<ol>\n<li>Android内存分配与回收机制</li>\n<li>Android常用的内存优化方法</li>\n<li>Android内存分析与监控</li>\n</ol>\n</blockquote>\n<p>文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考<a href=\"https://time.geekbang.org/column/article/71277\" target=\"_blank\" rel=\"noopener\">极客时间</a>张绍文老师的Android开发高手课。</p>\n<h2 id=\"一、Android内存分配与回收机制\"><a href=\"#一、Android内存分配与回收机制\" class=\"headerlink\" title=\"一、Android内存分配与回收机制\"></a>一、Android内存分配与回收机制</h2><p>想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。</p>\n<h3 id=\"Application-Framework\"><a href=\"#Application-Framework\" class=\"headerlink\" title=\"Application Framework\"></a>Application Framework</h3><p>首先来看下进程的优先级：</p>\n<p><img src=\"https://img.carlwe.com/process_priority.jpg\" alt=\"\"></p>\n<p><code>前台进程</code>：用户当前操作所必需的进程。</p>\n<p><code>可见进程</code>：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。</p>\n<p><code>服务进程</code>：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）</p>\n<p><code>后台进程</code>：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）</p>\n<p><code>空进程</code>：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间</p>\n<p><code>进程生命周期</code>：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。</p>\n<p><code>最后我们需要知道</code>：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。</p>\n<h3 id=\"Dalvik-Art-虚拟机\"><a href=\"#Dalvik-Art-虚拟机\" class=\"headerlink\" title=\"Dalvik/Art 虚拟机\"></a>Dalvik/Art 虚拟机</h3><h4 id=\"Android-Dalvik-Heap\"><a href=\"#Android-Dalvik-Heap\" class=\"headerlink\" title=\"Android Dalvik Heap\"></a>Android Dalvik Heap</h4><p><img src=\"https://img.carlwe.com/dalvik_art_gc.jpeg\" alt=\"\"></p>\n<p><code>简介</code>：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。</p>\n<p><code>对象分配过程</code>：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。</p>\n<p><code>问题</code>：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。</p>\n<h4 id=\"Dalvik虚拟机执行模式\"><a href=\"#Dalvik虚拟机执行模式\" class=\"headerlink\" title=\"Dalvik虚拟机执行模式\"></a>Dalvik虚拟机执行模式</h4><p><img src=\"https://img.carlwe.com/dalvik_gc.jpg\" alt=\"\"></p>\n<p><code>Dalvik垃圾回收过程</code>：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。</p>\n<p><code>大内存对象分配</code>：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。</p>\n<p><code>总结</code>：Dalvik虚拟机的三个问题</p>\n<ol>\n<li>GC时挂起所有线程 </li>\n<li>大而连续的空间紧张 </li>\n<li>内存碎片化严重</li>\n</ol>\n<h4 id=\"ART虚拟机的优化\"><a href=\"#ART虚拟机的优化\" class=\"headerlink\" title=\"ART虚拟机的优化\"></a>ART虚拟机的优化</h4><p><img src=\"https://img.carlwe.com/art_gc.jpg\" alt=\"\"></p>\n<p><code>GC过程</code>：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。</p>\n<p><code>大内存对象分配</code>：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.</p>\n<p><code>内存碎片化</code>在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。</p>\n<p><code>总结</code> ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。</p>\n<h3 id=\"Linux内核\"><a href=\"#Linux内核\" class=\"headerlink\" title=\"Linux内核\"></a>Linux内核</h3><p><img src=\"https://img.carlwe.com/linux_kernel.jpg\" alt=\"\"></p>\n<p><code>Lowmemorykiller</code>：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。</p>\n<p><code>Oom_killer</code> ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。</p>\n<p><code>Oom的条件</code>：只要allocated + 新分配的内存 &gt;= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）</p>\n<h3 id=\"内存不优化会导致哪些问题？\"><a href=\"#内存不优化会导致哪些问题？\" class=\"headerlink\" title=\"内存不优化会导致哪些问题？\"></a>内存不优化会导致哪些问题？</h3><p><img src=\"https://img.carlwe.com/memory_problem.jpg\" alt=\"\"></p>\n<p>上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。</p>\n<p><code>内存抖动</code>：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p>\n<h2 id=\"二、Android常用的内存优化方法\"><a href=\"#二、Android常用的内存优化方法\" class=\"headerlink\" title=\"二、Android常用的内存优化方法\"></a>二、Android常用的内存优化方法</h2><p>在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：</p>\n<blockquote>\n<ol>\n<li>降低运行时内存</li>\n<li>代码优化</li>\n<li>内存泄漏优化</li>\n</ol>\n</blockquote>\n<p>在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。</p>\n<h3 id=\"降低运行时内存\"><a href=\"#降低运行时内存\" class=\"headerlink\" title=\"降低运行时内存\"></a>降低运行时内存</h3><p><img src=\"https://img.carlwe.com/reduce_running_memory.jpg\" alt=\"\"></p>\n<p>降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：</p>\n<ul>\n<li>减小APK体积</li>\n</ul>\n<blockquote>\n<ol>\n<li>去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。</li>\n<li>尽量复用资源，其实这是一种比较好的编码习惯。</li>\n<li>对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。</li>\n</ol>\n</blockquote>\n<ul>\n<li>Bitmap优化</li>\n</ul>\n<blockquote>\n<ol>\n<li>统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。</li>\n<li>图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。</li>\n<li>inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。</li>\n<li>选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</li>\n<li>inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。</li>\n</ol>\n</blockquote>\n<p>参考：</p>\n<p>Android 官网文档<a href=\"https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Managing Bitmap Memory</a>、<a href=\"https://developer.android.com/topic/performance/graphics/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Handling bitmaps</a></p>\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>这里介绍一些好的编码习惯：</p>\n<p><img src=\"https://img.carlwe.com/code_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考<a href=\"http://hukai.me/android-performance-patterns-season-3/\" target=\"_blank\" rel=\"noopener\">Android性能优化典范</a></p>\n</li>\n<li><p>在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。</p>\n</li>\n<li><p>SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)</p>\n<blockquote>\n<p><code>SoftReference</code>：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n<p><code>WeakReference</code>：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 </p>\n<p><code>PhantomReference</code>：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    </p>\n</blockquote>\n</li>\n<li><p>谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用<code>largeheap=true</code>声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。</p>\n</li>\n<li><p>谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。</p>\n</li>\n<li><p>考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。</p>\n</li>\n</ol>\n<h3 id=\"内存泄漏优化\"><a href=\"#内存泄漏优化\" class=\"headerlink\" title=\"内存泄漏优化\"></a>内存泄漏优化</h3><p>内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：</p>\n<p><img src=\"https://img.carlwe.com/memory_leak_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。</p>\n</li>\n<li><p>除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。</p>\n</li>\n<li><p>大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。</p>\n</li>\n<li><p>webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())</p>\n</li>\n<li><p>虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。</p>\n</li>\n<li><p>我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。</p>\n</li>\n<li><p>谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。</p>\n</li>\n</ol>\n<p><code>总结</code>：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。</p>\n<h3 id=\"做好上面说的1、2、3就够了吗？\"><a href=\"#做好上面说的1、2、3就够了吗？\" class=\"headerlink\" title=\"做好上面说的1、2、3就够了吗？\"></a>做好上面说的1、2、3就够了吗？</h3><p><img src=\"https://img.carlwe.com/memory_is_enough.jpg\" alt=\"\"></p>\n<p>前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？</p>\n<p>我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！</p>\n<h2 id=\"三、Android内存分析与监控\"><a href=\"#三、Android内存分析与监控\" class=\"headerlink\" title=\"三、Android内存分析与监控\"></a>三、Android内存分析与监控</h2><p>Android内存分析和监控主要介绍如下四种方式：</p>\n<blockquote>\n<ol>\n<li>查看GC日志</li>\n<li>查看内存使用情况</li>\n<li>通过LeakCanary监控内存 泄漏</li>\n<li>线上监控</li>\n</ol>\n</blockquote>\n<h3 id=\"查看GC日志\"><a href=\"#查看GC日志\" class=\"headerlink\" title=\"查看GC日志\"></a>查看GC日志</h3><h4 id=\"GC的类型：\"><a href=\"#GC的类型：\" class=\"headerlink\" title=\"GC的类型：\"></a>GC的类型：</h4><p><img src=\"https://img.carlwe.com/gc_type.jpg\" alt=\"\"></p>\n<p><code>Concurrent</code>： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。</p>\n<p><code>Alloc</code>： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。</p>\n<p><code>Explicit</code>：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）</p>\n<p><code>NativeAlloc</code>：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。</p>\n<h4 id=\"查看垃圾回收日志\"><a href=\"#查看垃圾回收日志\" class=\"headerlink\" title=\"查看垃圾回收日志\"></a>查看垃圾回收日志</h4><p><img src=\"https://img.carlwe.com/gc_log.jpg\" alt=\"\"></p>\n<p>在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：</p>\n<blockquote>\n<p><code>垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间</code></p>\n<p><code>LOS objects</code>是前面所说到的Art虚拟机新增的</p>\n<p>着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧</p>\n</blockquote>\n<h3 id=\"查看内存使用情况\"><a href=\"#查看内存使用情况\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h3><p>通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：</p>\n<blockquote>\n<ol>\n<li>adb shell</li>\n<li>Profiler</li>\n</ol>\n</blockquote>\n<h4 id=\"查看内存使用情况-1\"><a href=\"#查看内存使用情况-1\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h4><p><img src=\"https://img.carlwe.com/adb_dumpsys.jpg\" alt=\"\"></p>\n<p>详细的使用请参考AndroidDeveloper<a href=\"https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">调查RAM使用情况</a></p>\n<h4 id=\"使用Profiler分析内存\"><a href=\"#使用Profiler分析内存\" class=\"headerlink\" title=\"使用Profiler分析内存\"></a>使用Profiler分析内存</h4><p>AndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。</p>\n<p><img src=\"https://img.carlwe.com/use_profiler.jpg\" alt=\"\"></p>\n<p>如何通过Profiler进行内存的分析，如何找到内存泄漏请查看</p>\n<p><a href=\"https://developer.android.com/studio/profile/memory-profiler\" target=\"_blank\" rel=\"noopener\">使用 Memory Profiler 查看 Java 堆和内存分配</a></p>\n<p>这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。</p>\n<h3 id=\"使用LeakCanary监控内存泄漏\"><a href=\"#使用LeakCanary监控内存泄漏\" class=\"headerlink\" title=\"使用LeakCanary监控内存泄漏\"></a>使用LeakCanary监控内存泄漏</h3><p><img src=\"https://img.carlwe.com/leakcanary_logo.png\" alt=\"\"></p>\n<p><code>LeakCanary名字的由来</code>：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。</p>\n<p><code>原理</code>：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。</p>\n<p><code>LeakCanary的问题</code>：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。</p>\n<p>详细查看 <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"线上监控\"><a href=\"#线上监控\" class=\"headerlink\" title=\"线上监控\"></a>线上监控</h3><p>线上的内存监控一般都是一些大公司在做，例如美团的<a href=\"https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf\" target=\"_blank\" rel=\"noopener\">Probe</a>还有微信最近开源的<a href=\"https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA\" target=\"_blank\" rel=\"noopener\">Matrix</a>，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjrlu8ocu0000m9a2mx7q6een","tag_id":"cjrlu8od00002m9a28ctqnc34","_id":"cjrlu8od20004m9a2bh82n0kj"},{"post_id":"cjrlu8ocy0001m9a2y66fvlih","tag_id":"cjrlu8od00002m9a28ctqnc34","_id":"cjrlu8od30005m9a2q42jmckv"},{"post_id":"cjrlu8ohu0006m9a2s6dpq868","tag_id":"cjrlu8ohx0008m9a2qk7fsyut","_id":"cjrlu8ohy0009m9a2kflop8lf"},{"post_id":"cjrlu8oiy000am9a2w7eyk1zv","tag_id":"cjrlu8ohx0008m9a2qk7fsyut","_id":"cjrlu8oj0000cm9a28nm0cydb"},{"post_id":"cjrlu8oiz000bm9a2ga46rom3","tag_id":"cjrlu8oj0000dm9a2i9aascme","_id":"cjrlu8oj1000em9a22gwfs2jf"}],"Tag":[{"name":"生活","_id":"cjrlu8od00002m9a28ctqnc34"},{"name":"科技","_id":"cjrlu8ohx0008m9a2qk7fsyut"},{"name":"技术","_id":"cjrlu8oj0000dm9a2i9aascme"}]}}